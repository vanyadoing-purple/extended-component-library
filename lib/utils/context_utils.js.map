{"version":3,"file":"context_utils.js","sourceRoot":"","sources":["../../src/utils/context_utils.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,WAAW,EAAC,MAAM,cAAc,CAAC;AAEzC,IAAI,cAAc,GAAG,KAAK,CAAC;AAE3B;;;;;;;;;;GAUG;AACH,MAAM,UAAU,iBAAiB;IAC/B,IAAI,cAAc;QAAE,OAAO;IAE3B,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;IAC/B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3B,cAAc,GAAG,IAAI,CAAC;AACxB,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {ContextRoot} from '@lit/context';\r\n\r\nlet hasContextRoot = false;\r\n\r\n/**\r\n * Attaches a `ContextRoot` to document body if one was not attached already.\r\n *\r\n * In some cases, context consumers may be slotted into a parent component that\r\n * renders context provider in its shadow DOM. If the parent component is\r\n * upgraded late, its children may end up requesting a context that is not\r\n * currently provided by any provider.\r\n *\r\n * The `ContextRoot` class intercepts and tracks unsatisfied `context-request`\r\n * events and then redispatch these requests once providers become available.\r\n */\r\nexport function attachContextRoot() {\r\n  if (hasContextRoot) return;\r\n\r\n  const root = new ContextRoot();\r\n  root.attach(document.body);\r\n  hasContextRoot = true;\r\n}\r\n"]}