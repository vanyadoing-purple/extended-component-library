{"version":3,"file":"dom_utils_test.js","sourceRoot":"","sources":["../../src/utils/dom_utils_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,mCAAmC;AAEnC,OAAO,EAAC,2BAA2B,EAAE,iBAAiB,EAAC,MAAM,gBAAgB,CAAC;AAE9E,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,MAAM,GAAG,2BAA2B,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAEtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aACd,IAAI,CACD,wDAAwD;YACxD,iBAAiB,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,MAAM,GAAG,iBAAiB,CAC5B,mEAAmE,CAAC,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,MAAM,GAAG,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;QAE7D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,MAAM,GAAG,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {createLinkElementForWebFont, extractTextAndURL} from './dom_utils.js';\r\n\r\ndescribe('createLinkElementForWebFont', () => {\r\n  it('returns <link> with URI-encoded Google Fonts href', () => {\r\n    const linkEl = createLinkElementForWebFont('Google Sans', [400, 500]);\r\n\r\n    expect(linkEl.href)\r\n        .toBe(\r\n            'https://fonts.googleapis.com/css2?family=Google%20Sans' +\r\n            ':wght@400%3B500');\r\n    expect(linkEl.rel).toBe('stylesheet');\r\n  });\r\n});\r\n\r\ndescribe('extractTextAndURL', () => {\r\n  it('returns text and URL from valid HTML attribution with link', () => {\r\n    const output = extractTextAndURL(\r\n        '<a href=\"https://www.google.com/maps/contrib/123\">Author Name</a>');\r\n\r\n    expect(output.text).toBe('Author Name');\r\n    expect(output.url).toBe('https://www.google.com/maps/contrib/123');\r\n  });\r\n\r\n  it('returns text only when HTML attribution contains no link', () => {\r\n    const output = extractTextAndURL('<span>Author Name</span>');\r\n\r\n    expect(output.text).toBe('Author Name');\r\n    expect(output.url).toBeUndefined();\r\n  });\r\n\r\n  it('returns undefined text and URL when HTML attribution is empty', () => {\r\n    const output = extractTextAndURL('');\r\n\r\n    expect(output.text).toBeUndefined();\r\n    expect(output.url).toBeUndefined();\r\n  });\r\n});\r\n"]}