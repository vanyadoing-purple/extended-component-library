{"version":3,"file":"opening_hours_test.js","sourceRoot":"","sources":["../../src/utils/opening_hours_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {makeFakePlace} from '../testing/fake_place.js';\r\n\r\nimport {formatTimeWithWeekdayMaybe, getUpcomingCloseTime, getUpcomingOpenTime, isOpen, isSoon, NextCloseTimeStatus, NextOpenTimeStatus} from './opening_hours.js';\r\n\r\ntype OpeningHours = google.maps.places.OpeningHours;\r\ntype OpeningHoursPeriod = google.maps.places.OpeningHoursPeriod;\r\n\r\nconst ALWAYS_OPEN_HOURS: OpeningHours = {\r\n  periods: [makePeriod(0, 0)],\r\n  weekdayDescriptions: []\r\n};\r\n\r\nconst SF_OFFSET = -7 * 60;\r\nconst NYC_OFFSET = -4 * 60;\r\n\r\nconst SUN = 0;\r\nconst MON = 1;\r\nconst TUE = 2;\r\nconst WED = 3;\r\nconst THU = 4;\r\nconst FRI = 5;\r\nconst SAT = 6;\r\n\r\n/** Quickly generate an OpeningHoursPeriod at hour granularity. */\r\nfunction makePeriod(\r\n    startDay: number, startHour: number, endDay?: number,\r\n    endHour?: number): OpeningHoursPeriod {\r\n  const open = {day: startDay, hour: startHour, minute: 0};\r\n  if ((endDay == null) || (endHour == null)) {\r\n    return {open, close: null};\r\n  }\r\n  const close = {day: endDay, hour: endHour, minute: 0};\r\n  return {open, close};\r\n}\r\n\r\nfunction makeDateInLocale(\r\n    dateTimeString: string, utcOffsetMinutes: number): Date {\r\n  const sign = utcOffsetMinutes > 0 ? '+' : '-';\r\n  const offsetHelper = new Date();\r\n  offsetHelper.setHours(0);\r\n  offsetHelper.setMinutes(Math.abs(utcOffsetMinutes));\r\n  const offsetString = offsetHelper.toLocaleString(\r\n      'en-US', {hour12: false, hour: '2-digit', minute: '2-digit'});\r\n  return new Date(`${dateTimeString}${sign}${offsetString}`);\r\n}\r\n\r\ndescribe('Opening hours utilities', () => {\r\n  describe('formatTimeWithWeekdayMaybe', () => {\r\n    it('formats a relative time with a weekday when the absolute point is over 24 hours in the future',\r\n       () => {\r\n         const point = {day: SAT, hour: 17, minute: 0};  // Saturday, 5:00 PM\r\n         const pointDate = new Date(\r\n             '2023-04-08T17:00-04:00');  // Saturday, 5:00 PM Eastern Time\r\n\r\n         // Friday, 1:00 PM Pacific Time -- 25 hours before pointDate\r\n         const now = new Date('2023-04-07T13:00-07:00');\r\n\r\n         expect(formatTimeWithWeekdayMaybe(point, pointDate, now))\r\n             .toBe('Sat 5:00 PM');\r\n       });\r\n\r\n    it('formats a relative time without a weekday when the absolute point is less than 24 hours in the future',\r\n       () => {\r\n         const point = {day: SAT, hour: 17, minute: 0};  // Saturday, 5:00 PM\r\n         const pointDate = new Date(\r\n             '2023-04-08T17:00-04:00');  // Saturday, 5:00 PM Eastern Time\r\n\r\n         // Friday, 3:00 PM Pacific Time -- 23 hours before pointDate\r\n         const now = new Date('2023-04-07T15:00-07:00');\r\n\r\n         expect(formatTimeWithWeekdayMaybe(point, pointDate, now))\r\n             .toBe('5:00 PM');\r\n       });\r\n  });\r\n\r\n  describe('isSoon', () => {\r\n    it('returns true if a date is 23 hours away', () => {\r\n      expect(isSoon(new Date('2023-04-11T09:00'), new Date('2023-04-10T10:00')))\r\n          .toBeTrue();\r\n    });\r\n\r\n    it('returns false if a date is 25 hours away', () => {\r\n      expect(isSoon(new Date('2023-04-11T11:00'), new Date('2023-04-10T10:00')))\r\n          .toBeFalse();\r\n    });\r\n\r\n    it('returns false is the date already passed', () => {\r\n      expect(isSoon(new Date('2023-04-10T09:00'), new Date('2023-04-10T10:00')))\r\n          .toBeFalse();\r\n    });\r\n  });\r\n\r\n  describe('getUpcomingCloseTime', () => {\r\n    it('returns unknown when there isn\\'t enough information', async () => {\r\n      const utcOffsetMinutes = NYC_OFFSET;\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours: undefined, utcOffsetMinutes});\r\n\r\n      expect(getUpcomingCloseTime(place, new Date())).toEqual({\r\n        status: NextCloseTimeStatus.UNKNOWN\r\n      });\r\n    });\r\n\r\n    it('returns a status when the place is always open', () => {\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours: ALWAYS_OPEN_HOURS,\r\n        utcOffsetMinutes: 0,\r\n      });\r\n\r\n      expect(getUpcomingCloseTime(place, new Date())).toEqual({\r\n        status: NextCloseTimeStatus.ALWAYS_OPEN\r\n      });\r\n    });\r\n\r\n    it('returns a status when the place is already closed', () => {\r\n      const mondayNineToFive = makePeriod(1, 9, 1, 17);\r\n      const monday8AmSf = makeDateInLocale('2023-04-10T08:00', SF_OFFSET);\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours:\r\n            {periods: [mondayNineToFive], weekdayDescriptions: []},\r\n        utcOffsetMinutes: SF_OFFSET\r\n      });\r\n\r\n      expect(getUpcomingCloseTime(place, monday8AmSf)).toEqual({\r\n        status: NextCloseTimeStatus.NOT_OPEN_NOW\r\n      });\r\n    });\r\n\r\n    it('uses the Place timezone when checking if the place is already closed',\r\n       () => {\r\n         const mondayNineToFive = makePeriod(MON, 9, MON, 17);\r\n         const monday4PmSf = makeDateInLocale('2023-04-10T16:00', SF_OFFSET);\r\n         const place = makeFakePlace({\r\n           id: '123',\r\n           regularOpeningHours:\r\n               {periods: [mondayNineToFive], weekdayDescriptions: []},\r\n           utcOffsetMinutes: NYC_OFFSET\r\n         });\r\n\r\n         expect(getUpcomingCloseTime(place, monday4PmSf)).toEqual({\r\n           status: NextCloseTimeStatus.NOT_OPEN_NOW\r\n         });\r\n       });\r\n\r\n    it('returns a closing time for status for a Place closing soon', () => {\r\n      const thursday3PmSf = makeDateInLocale('2023-04-13T15:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [\r\n          makePeriod(WED, 9, WED, 17),  // Wed 9am - 5pm\r\n          makePeriod(THU, 9, THU, 17),  // Thurs 9am - 5pm\r\n          makePeriod(FRI, 9, SAT, 2),   // Friday 9am - Sat 2am\r\n        ],\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(getUpcomingCloseTime(place, thursday3PmSf)).toEqual({\r\n        status: NextCloseTimeStatus.WILL_CLOSE,\r\n        closePoint: regularOpeningHours.periods[1].close!,\r\n        closeDate: makeDateInLocale('2023-04-13T17:00', SF_OFFSET)  // 5pm Thu\r\n      });\r\n    });\r\n\r\n    it('returns a closing time for a Place closing in over 24 hours from now',\r\n       () => {\r\n         const monday1pmSf = makeDateInLocale('2023-04-10T13:00', SF_OFFSET);\r\n         const regularOpeningHours: OpeningHours = {\r\n           periods: [\r\n             makePeriod(MON, 9, FRI, 17),  // Mon 9am - Fri 5pm\r\n           ],\r\n           weekdayDescriptions: []\r\n         };\r\n         const place = makeFakePlace(\r\n             {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n         expect(getUpcomingCloseTime(place, monday1pmSf)).toEqual({\r\n           status: NextCloseTimeStatus.WILL_CLOSE,\r\n           closePoint: regularOpeningHours.periods[0].close!,\r\n           closeDate:\r\n               makeDateInLocale('2023-04-14T17:00', SF_OFFSET)  // 5pm Fri\r\n         });\r\n       });\r\n\r\n    it('handles a period which wraps the week', () => {\r\n      // Sequence is (week start) -> (now) -> (period end) -> (period start)\r\n      const monday8amSf = makeDateInLocale('2023-04-10T08:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [\r\n          makePeriod(WED, 9, WED, 17),  // Wed 9am - 5pm\r\n          makePeriod(THU, 9, THU, 17),  // Thurs 9am - 5pm\r\n          makePeriod(FRI, 18, MON, 9),  // Friday 6pm - Mon 9am\r\n        ],\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(getUpcomingCloseTime(place, monday8amSf)).toEqual({\r\n        status: NextCloseTimeStatus.WILL_CLOSE,\r\n        closePoint: regularOpeningHours.periods[2].close!,\r\n        closeDate: makeDateInLocale('2023-04-10T09:00', SF_OFFSET)  // 9am Mon\r\n      });\r\n    });\r\n\r\n    it('handles a period which wraps the week in the other direction', () => {\r\n      // Sequence is (week start) -> (period end) -> (period start) -> (now)\r\n      const saturday11pmSf = makeDateInLocale('2023-04-15T23:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [\r\n          makePeriod(WED, 9, WED, 17),  // Wed 9am - 5pm\r\n          makePeriod(THU, 9, THU, 17),  // Thurs 9am - 5pm\r\n          makePeriod(FRI, 18, SUN, 9),  // Friday 6pm - Sun 9am\r\n        ],\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(getUpcomingCloseTime(place, saturday11pmSf)).toEqual({\r\n        status: NextCloseTimeStatus.WILL_CLOSE,\r\n        closePoint: regularOpeningHours.periods[2].close!,\r\n        closeDate: makeDateInLocale('2023-04-16T09:00', SF_OFFSET)  // 9am Sun\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getUpcomingOpenTime', () => {\r\n    it('returns a status if there is not enough information', () => {\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours: {\r\n          periods: [],\r\n          weekdayDescriptions: [],\r\n        },\r\n        utcOffsetMinutes: undefined\r\n      });\r\n\r\n      expect(getUpcomingOpenTime(place, new Date())).toEqual({\r\n        status: NextOpenTimeStatus.UNKNOWN\r\n      });\r\n    });\r\n\r\n    it('returns a status if the place is never open', () => {\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours: {\r\n          periods: [],\r\n          weekdayDescriptions: [],\r\n        },\r\n        utcOffsetMinutes: 0\r\n      });\r\n\r\n      expect(getUpcomingOpenTime(place, new Date())).toEqual({\r\n        status: NextOpenTimeStatus.NEVER_OPEN\r\n      });\r\n    });\r\n\r\n    it('returns a status if the place is already open', () => {\r\n      const tuesdayNoonSf = makeDateInLocale('2023-04-11T12:00', SF_OFFSET);\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours: {\r\n          periods: [makePeriod(TUE, 9, TUE, 17)],  // Tuesday 9am - 5pm\r\n          weekdayDescriptions: [],\r\n        },\r\n        utcOffsetMinutes: SF_OFFSET\r\n      });\r\n\r\n      expect(getUpcomingOpenTime(place, tuesdayNoonSf)).toEqual({\r\n        status: NextOpenTimeStatus.ALREADY_OPEN\r\n      });\r\n    });\r\n\r\n    it('returns the next time the place will open', () => {\r\n      const thursday6PmSf = makeDateInLocale('2023-04-13T18:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [\r\n          makePeriod(WED, 9, WED, 17),  // Wed 9am - 5pm\r\n          makePeriod(THU, 9, THU, 17),  // Thurs 9am - 5pm\r\n          makePeriod(FRI, 9, SAT, 2),   // Friday 9am - Sat 2am\r\n        ],\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(getUpcomingOpenTime(place, thursday6PmSf)).toEqual({\r\n        status: NextOpenTimeStatus.WILL_OPEN,\r\n        openPoint: regularOpeningHours.periods[2].open,\r\n        openDate: makeDateInLocale('2023-04-14T09:00', SF_OFFSET)  // 9am Fri\r\n      });\r\n    });\r\n\r\n    it('returns the next time the place will open if it wraps a week', () => {\r\n      // Note that unlike the similar tests for `getUpcomingCloseTime()`, it\r\n      // doesn't matter whether the open period itself wraps the week; this test\r\n      // simply checks if the current time wraps a week to the next open time.\r\n      //\r\n      // Sequence is (now) -> (week start) -> (period start)\r\n      const saturdayNoonSf = makeDateInLocale('2023-04-15T12:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [\r\n          makePeriod(WED, 9, WED, 17),  // Wed 9am - 5pm\r\n          makePeriod(THU, 9, THU, 17),  // Thurs 9am - 5pm\r\n          makePeriod(FRI, 9, SAT, 2),   // Friday 9am - Sat 2am\r\n        ],\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(getUpcomingOpenTime(place, saturdayNoonSf)).toEqual({\r\n        status: NextOpenTimeStatus.WILL_OPEN,\r\n        openPoint: regularOpeningHours.periods[0].open,\r\n        openDate: makeDateInLocale('2023-04-19T09:00', SF_OFFSET)  // 9am Wed\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('isOpen', () => {\r\n    it('returns undefined if opening hours are not available', () => {\r\n      const place = makeFakePlace({id: '123'});\r\n      expect(isOpen(place)).toBeUndefined();\r\n    });\r\n\r\n    it('returns true if the place is always open', () => {\r\n      const place = makeFakePlace({\r\n        id: '123',\r\n        regularOpeningHours: ALWAYS_OPEN_HOURS,\r\n        utcOffsetMinutes: 0,\r\n      });\r\n      expect(isOpen(place)).toBeTrue();\r\n    });\r\n\r\n    it('returns true if the place is open now', () => {\r\n      const mondayNoonSf = makeDateInLocale('2023-08-07T12:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [makePeriod(MON, 9, MON, 17)],  // Wed 9am - 5pm\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(isOpen(place, mondayNoonSf)).toBeTrue();\r\n    });\r\n\r\n    it('returns false if the place is not open now', () => {\r\n      const mondayEarlySf = makeDateInLocale('2023-08-07T06:00', SF_OFFSET);\r\n      const regularOpeningHours: OpeningHours = {\r\n        periods: [makePeriod(MON, 9, MON, 17)],  // Wed 9am - 5pm\r\n        weekdayDescriptions: []\r\n      };\r\n      const place = makeFakePlace(\r\n          {id: '123', regularOpeningHours, utcOffsetMinutes: SF_OFFSET});\r\n\r\n      expect(isOpen(place, mondayEarlySf)).toBeFalse();\r\n    });\r\n  });\r\n});"]}