{"version":3,"file":"attribute_converters.js","sourceRoot":"","sources":["../../src/utils/attribute_converters.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAMH;;;GAGG;AACH,MAAM,CAAC,MAAM,mCAAmC,GACS;IACnD,aAAa,CAAC,IAAiB;QAEzB,IAAI,IAAI,KAAK,IAAI;YAAE,OAAO,SAAS,CAAC;QACpC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAChE,OAAO,EAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAC,CAAC;IACxC,CAAC;IACL,WAAW,CAAC,IAAoB;QAE1B,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACjD,CAAC;CACN,CAAC;AAEN;;;GAGG;AACH,MAAM,CAAC,MAAM,gCAAgC,GACO;IAC9C,aAAa,CAAC,IAAiB;QAEzB,OAAO,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,SAAS,CAAC;IACjE,CAAC;IACL,WAAW,CAAC,IAAe;QAErB,OAAO,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IACjC,CAAC;CACN,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {ComplexAttributeConverter} from 'lit';\r\n\r\ntype LatLngLiteral = google.maps.LatLngLiteral;\r\n\r\n/**\r\n * Converter that transforms an optional `google.maps.LatLngLiteral` property\r\n * to/from an attribute string literal in the `lat,lng` format.\r\n */\r\nexport const LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER:\r\n    ComplexAttributeConverter<LatLngLiteral|undefined> = {\r\n      fromAttribute(attr: string|null): LatLngLiteral |\r\n          undefined {\r\n            if (attr === null) return undefined;\r\n            const [lat, lng] = attr.split(',').map((s) => Number(s.trim()));\r\n            return {lat: lat || 0, lng: lng || 0};\r\n          },\r\n      toAttribute(prop?: LatLngLiteral): string |\r\n          null {\r\n            return prop ? `${prop.lat},${prop.lng}` : null;\r\n          },\r\n    };\r\n\r\n/**\r\n * Converter that transforms an optional string-array property to/from a\r\n * space-delimited attribute value.\r\n */\r\nexport const STRING_ARRAY_ATTRIBUTE_CONVERTER:\r\n    ComplexAttributeConverter<string[]|undefined> = {\r\n      fromAttribute(attr: string|null): string[] |\r\n          undefined {\r\n            return attr?.split(/\\s+/).filter((s) => s !== '') ?? undefined;\r\n          },\r\n      toAttribute(prop?: string[]): string |\r\n          null {\r\n            return prop?.join(' ') ?? null;\r\n          },\r\n    };\r\n"]}