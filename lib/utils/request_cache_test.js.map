{"version":3,"file":"request_cache_test.js","sourceRoot":"","sources":["../../src/utils/request_cache_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {RequestCache} from './request_cache.js';\r\n\r\ninterface Request {\r\n  id: string;\r\n  values: number[];\r\n  location: string;\r\n  deliveryEnabled: boolean;\r\n  distance: number;\r\n  inventory: {[key: string]: number};\r\n}\r\n\r\ninterface Response {\r\n  id: string;\r\n  cost: number;\r\n  delivered: boolean;\r\n  status: string;\r\n}\r\n\r\nconst FAKE_REQUEST: Request = {\r\n  id: 'xHD87228BCE8',\r\n  values: [3, 5, 8, 2, 7, 8],\r\n  location: '123 Place St',\r\n  deliveryEnabled: true,\r\n  distance: 105.5,\r\n  inventory: {'D': 35, 'A': 10, 'C': 5, 'B': 20},\r\n};\r\n\r\nconst SORTED_REQUEST: Request = {\r\n  deliveryEnabled: true,\r\n  distance: 105.5,\r\n  id: 'xHD87228BCE8',\r\n  inventory: {'A': 10, 'B': 20, 'C': 5, 'D': 35},\r\n  location: '123 Place St',\r\n  values: [3, 5, 8, 2, 7, 8],\r\n};\r\n\r\nconst FAKE_RESPONSE: Response = {\r\n  id: 'xHD87228BCE8',\r\n  cost: 110.75,\r\n  delivered: true,\r\n  status: 'OK',\r\n};\r\n\r\nconst FAKE_RESPONSE_2: Response = {\r\n  id: 'xHD87228BCE8',\r\n  cost: 110.75,\r\n  delivered: false,\r\n  status: 'UNKNOWN',\r\n};\r\n\r\ndescribe('RequestCache', () => {\r\n  it('returns null when no request exists', async () => {\r\n    const requestCache =\r\n        new RequestCache<Request, Response, Error>(10, () => false);\r\n    const result = requestCache.get(FAKE_REQUEST);\r\n    expect(result).toBeNull();\r\n  });\r\n\r\n  it('returns the existing result when one exists', async () => {\r\n    const requestCache =\r\n        new RequestCache<Request, Response, Error>(10, () => false);\r\n    requestCache.set(FAKE_REQUEST, Promise.resolve(FAKE_RESPONSE));\r\n    const result = await requestCache.get(FAKE_REQUEST);\r\n    expect(result).toEqual(FAKE_RESPONSE);\r\n  });\r\n\r\n  it('updates result if request already exists', async () => {\r\n    const requestCache =\r\n        new RequestCache<Request, Response, Error>(10, () => false);\r\n    requestCache.set(FAKE_REQUEST, Promise.resolve(FAKE_RESPONSE));\r\n    requestCache.set(FAKE_REQUEST, Promise.resolve(FAKE_RESPONSE_2));\r\n    const result = await requestCache.get(FAKE_REQUEST);\r\n    expect(result).toEqual(FAKE_RESPONSE_2);\r\n  });\r\n\r\n  it('deletes request if it should be retried', async () => {\r\n    const requestCache =\r\n        new RequestCache<Request, Response, Error>(10, () => true);\r\n    requestCache.set(FAKE_REQUEST, Promise.reject(new Error()));\r\n    await 0;\r\n    const result = await requestCache.get(FAKE_REQUEST);\r\n    expect(result).toBeNull();\r\n  });\r\n\r\n  it('treats requests the same regardless of property order', async () => {\r\n    const requestCache =\r\n        new RequestCache<Request, Response, Error>(10, () => false);\r\n    requestCache.set(FAKE_REQUEST, Promise.resolve(FAKE_RESPONSE));\r\n    const result = await requestCache.get(SORTED_REQUEST);\r\n    expect(result).toEqual(FAKE_RESPONSE);\r\n  });\r\n});\r\n"]}