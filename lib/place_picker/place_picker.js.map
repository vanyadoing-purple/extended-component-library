{"version":3,"file":"place_picker.js","sourceRoot":"","sources":["../../src/place_picker/place_picker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// Placeholder for objectProperty (google3-only)\r\nimport {css, html, PropertyValues} from 'lit';\r\nimport {customElement, property, query, state} from 'lit/decorators.js';\r\n\r\nimport {APILoader} from '../api_loader/api_loader.js';\r\nimport {BaseComponent} from '../base/base_component.js';\r\nimport {GMPX_COLOR_ON_SURFACE, GMPX_COLOR_PRIMARY, GMPX_COLOR_SURFACE, GMPX_FONT_BODY, GMPX_FONT_SIZE_BASE} from '../base/common_styles.js';\r\nimport {RequestErrorEvent} from '../base/events.js';\r\nimport {FocusController} from '../base/focus_controller.js';\r\nimport {LocalizationController} from '../base/localization_controller.js';\r\nimport {WebFont, WebFontController} from '../base/web_font_controller.js';\r\nimport {LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER, STRING_ARRAY_ATTRIBUTE_CONVERTER} from '../utils/attribute_converters.js';\r\nimport {getDeepActiveElement} from '../utils/deep_element_access.js';\r\nimport {Deferred} from '../utils/deferred.js';\r\nimport type {Place, PlaceResult, PlacesLibrary} from '../utils/googlemaps_types.js';\r\nimport {isNotAvailableError, makePlaceFromPlaceResult, mapPlaceFieldsToPlaceResultFields} from '../utils/place_utils.js';\r\n\r\ntype Autocomplete = google.maps.places.Autocomplete;\r\ntype AutocompleteOptions = google.maps.places.AutocompleteOptions;\r\n\r\n/** Data field names in a `Place` that are fetched by Place Picker. */\r\nexport const PLACE_DATA_FIELDS = Object.freeze([\r\n  'addressComponents',\r\n  'adrFormatAddress',\r\n  'businessStatus',\r\n  'displayName',\r\n  'formattedAddress',\r\n  'googleMapsURI',\r\n  'iconBackgroundColor',\r\n  'location',\r\n  'photos',\r\n  'id',\r\n  'plusCode',\r\n  'svgIconMaskURI',\r\n  'types',\r\n  'utcOffsetMinutes',\r\n  'viewport',\r\n] as const);\r\n\r\n/** Data field names in a `PlaceResult` that are fetched by Place Picker. */\r\nexport const PLACE_RESULT_DATA_FIELDS = Object.freeze([\r\n  'address_component',\r\n  'adr_address',\r\n  'business_status',\r\n  'formatted_address',\r\n  'geometry',\r\n  'icon',\r\n  'icon_mask_base_uri',\r\n  'icon_background_color',\r\n  'name',\r\n  'photos',\r\n  'place_id',\r\n  'plus_code',\r\n  'type',\r\n  'url',\r\n  'utc_offset_minutes',\r\n] as const);\r\n\r\n/** Multiplier to scale margins and paddings based on font size. */\r\nconst SPACING_MULTIPLIER = 0.75;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-place-picker': PlacePicker;\r\n  }\r\n}\r\n\r\n/**\r\n * The place picker component is a text input that allows end users to search\r\n * Google Maps’ global database for a specific address or place using\r\n * autocomplete.\r\n *\r\n * ![](./doc_src/place-picker.gif)\r\n *\r\n * @event {Event} gmpx-placechange - This event is fired when a Place object is\r\n * made available for a Place the user has selected, when user clears the input\r\n * after selection, or when no Place result is found based on the input query.\r\n * (React: onPlaceChange)\r\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\r\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\r\n *\r\n * @cssproperty [--gmpx-color-surface] - Background color of the input.\r\n * @cssproperty [--gmpx-color-on-surface] - Main text color.\r\n * @cssproperty [--gmpx-color-primary] - Color of the input focus ring.\r\n * @cssproperty [--gmpx-font-family-base] - Font family.\r\n * @cssproperty [--gmpx-font-size-base] - Font size, used to scale the\r\n * component.\r\n */\r\n@customElement('gmpx-place-picker')\r\nexport class PlacePicker extends BaseComponent {\r\n  static override styles = css`\r\n    :host(:not([hidden])) {\r\n      /* Match the default display style of <input> element. */\r\n      display: inline-block;\r\n    }\r\n\r\n    .container {\r\n      color: ${GMPX_COLOR_ON_SURFACE};\r\n      font: ${GMPX_FONT_BODY};\r\n      position: relative;\r\n    }\r\n\r\n    .overlay {\r\n      display: flex;\r\n      inset: 0;\r\n      justify-content: space-between;\r\n      pointer-events: none;\r\n      position: absolute;\r\n    }\r\n\r\n    .icon {\r\n      font-size: inherit;\r\n    }\r\n\r\n    input {\r\n      background-color: ${GMPX_COLOR_SURFACE};\r\n      border: 1px solid #80868b;\r\n      border-radius: 4px;\r\n      color: ${GMPX_COLOR_ON_SURFACE};\r\n      box-sizing: border-box;\r\n      font-family: inherit;\r\n      font-size: inherit;\r\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER})\r\n               calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER * 2 + 1});\r\n      width: 100%;\r\n    }\r\n\r\n    input:focus {\r\n      outline: 2px solid ${GMPX_COLOR_PRIMARY};\r\n    }\r\n\r\n    input::placeholder {\r\n      color: ${GMPX_COLOR_ON_SURFACE};\r\n      opacity: 0.5;\r\n    }\r\n\r\n    button:not([hidden]) {\r\n      align-items: center;\r\n      background: none;\r\n      border: none;\r\n      color: inherit;\r\n      display: flex;\r\n      font: inherit;\r\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\r\n      pointer-events: auto;\r\n    }\r\n\r\n    button:enabled {\r\n      cursor: pointer;\r\n    }\r\n  `;\r\n\r\n  // https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\r\n  /** @ignore */\r\n  static override shadowRootOptions = {\r\n    ...BaseComponent.shadowRootOptions,\r\n    delegatesFocus: true,\r\n  };\r\n\r\n  /**\r\n   * Restricts predictions to up to five countries identified by their ISO\r\n   * 3166-1 Alpha-2 country codes, case insensitive ('us', 'br', 'au', etc.).\r\n   *\r\n   * Multiple country codes can be specified in the attribute as a set of\r\n   * space-separated tokens (for example, \"us ca\").\r\n   */\r\n  @property({converter: STRING_ARRAY_ATTRIBUTE_CONVERTER, reflect: true})\r\n  country?: string[];\r\n\r\n  /**\r\n   * The HTML id of a `<gmp-map>` element on the page that Place Autocomplete\r\n   * should bind to for location biasing. Note that the map need not be a parent\r\n   * of the current element.\r\n   */\r\n  @property({attribute: 'for-map', reflect: true, type: String})\r\n  forMap?: string;\r\n\r\n  /**\r\n   * Location of the region to bias predictions towards (or restrict if\r\n   * `strict-bounds` is set), in \"lat,lng\" format.\r\n   *\r\n   * This attribute must be used in conjunction with `radius`.\r\n   */\r\n  @property({\r\n    attribute: 'location-bias',\r\n    converter: LAT_LNG_LITERAL_ATTRIBUTE_CONVERTER,\r\n    reflect: true,\r\n  })\r\n  locationBias?: google.maps.LatLngLiteral;\r\n\r\n  /** Placeholder text to display before the user has entered any input. */\r\n  @property({reflect: true, type: String}) placeholder?: string;\r\n\r\n  /**\r\n   * Radius of the region, in meters, to bias predictions towards.\r\n   *\r\n   * This attribute must be used in conjunction with `location-bias`.\r\n   */\r\n  @property({reflect: true, type: Number}) radius?: number;\r\n\r\n  /**\r\n   * If true, only predictions that are within the specified location/radius\r\n   * or map viewport will be returned.\r\n   *\r\n   * Setting this property to false (which is the default) will make the results\r\n   * biased towards, but not restricted to, places contained within the bounds.\r\n   */\r\n  @property({attribute: 'strict-bounds', reflect: true, type: Boolean})\r\n  strictBounds = false;\r\n\r\n  /**\r\n   * The type of predictions to return. Some examples include “restaurant”,\r\n   * “country” and “address”. This property supports any one type found in\r\n   * Tables 1~3 of [Place\r\n   * Types](https://developers.google.com/maps/documentation/javascript/supported_types).\r\n   *\r\n   * If no type is specified, predictions of all types will be returned.\r\n   */\r\n  @property({reflect: true, type: String}) type?: string;\r\n\r\n  /**\r\n   * This readonly property contains data about the user-selected place.\r\n   *\r\n   * If the user selects a valid place, then the object is guaranteed to contain\r\n   * at minimum its Place ID, along with all available [Basic Data\r\n   * fields](https://developers.google.com/maps/documentation/places/web-service/place-data-fields#basic).\r\n   *\r\n   * This property is undefined when user input is empty, and null when no\r\n   * results are found based on user input.\r\n   */\r\n  get value(): Place|null|undefined {\r\n    return this.valueInternal;\r\n  }\r\n  @state() private valueInternal?: Place|null;\r\n\r\n  @state() private disableSearch = true;\r\n  @state() private hideClearButton = true;\r\n\r\n  @query('input') private readonly inputElement?: HTMLInputElement;\r\n\r\n  @query('.clear-button')\r\n  private readonly clearButtonElement?: HTMLButtonElement;\r\n  @query('.search-button')\r\n  private readonly searchButtonElement?: HTMLButtonElement;\r\n\r\n  protected readonly focusController = new FocusController(this);\r\n\r\n  protected readonly fontLoader = new WebFontController(\r\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\r\n\r\n  private readonly autocomplete = new Deferred<Autocomplete>();\r\n\r\n  protected override willUpdate(changedProperties: PropertyValues) {\r\n    if (changedProperties.has(/* @state */ 'disableSearch') &&\r\n        this.disableSearch && this.focusController.isKeyboardNavigating &&\r\n        getDeepActiveElement() === this.searchButtonElement) {\r\n      this.clearButtonElement?.focus();\r\n    }\r\n    if (changedProperties.has(/* @state */ 'hideClearButton') &&\r\n        this.hideClearButton && this.focusController.isKeyboardNavigating &&\r\n        getDeepActiveElement() === this.clearButtonElement) {\r\n      this.inputElement?.focus();\r\n    }\r\n  }\r\n\r\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\r\n\r\n  protected override render() {\r\n    return html`\r\n      <div class=\"container\">\r\n        <input\r\n          @input=${this.handleInput}\r\n          .placeholder=${this.placeholder ?? ''}\r\n        />\r\n        <div class=\"overlay\">\r\n          <button\r\n            aria-label=${this.getMsg('PLACE_SEARCH_ARIA_LABEL')}\r\n            class=\"search-button\"\r\n            @click=${this.handleSearch}\r\n            .disabled=${this.disableSearch}\r\n            type=\"button\"\r\n          >\r\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\r\n              search\r\n            </span>\r\n          </button>\r\n          <button\r\n            aria-label=${this.getMsg('PLACE_CLEAR_ARIA_LABEL')}\r\n            class=\"clear-button\"\r\n            @click=${this.handleClear}\r\n            .hidden=${this.hideClearButton}\r\n            type=\"button\"\r\n          >\r\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\r\n              cancel\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  protected override firstUpdated() {\r\n    this.initializeAutocomplete(this.inputElement!);\r\n  }\r\n\r\n  protected override async updated(changedProperties: PropertyValues) {\r\n    if (this.autocomplete.value &&\r\n        this.shouldUpdateAutocompleteOptions(changedProperties)) {\r\n      const options = await this.makeAutocompleteOptions();\r\n      this.autocomplete.value.setOptions(options);\r\n    }\r\n    if (changedProperties.has('forMap') && this.forMap) {\r\n      const map = await this.getMapById(this.forMap);\r\n      map && this.bindTo(map);\r\n    }\r\n    if (changedProperties.has(/* @state */ 'valueInternal')) {\r\n      this.dispatchEvent(new Event('gmpx-placechange'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Binds Place Autocomplete to the specified map so that its results are\r\n   * biased towards the map’s viewport.\r\n   */\r\n  async bindTo(map: google.maps.Map) {\r\n    const autocomplete = await this.autocomplete.promise;\r\n    autocomplete.bindTo('bounds', map);\r\n  }\r\n\r\n  /**\r\n   * Finds a `<gmp-map>` element under the same root node as this component with\r\n   * the specified HTML ID and returns its inner `google.maps.Map` object.\r\n   *\r\n   * Note that this method may block indefinitely if the `<gmp-map>` custom\r\n   * element never gets defined.\r\n   */\r\n  private async getMapById(id: string): Promise<google.maps.Map|null> {\r\n    const rootNode = this.getRootNode() as Document | ShadowRoot;\r\n    const mapElement = rootNode.getElementById(id);\r\n    if (mapElement?.tagName === 'GMP-MAP') {\r\n      await customElements.whenDefined('gmp-map');\r\n      return (mapElement as unknown as {innerMap: google.maps.Map}).innerMap;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private shouldUpdateAutocompleteOptions(changedProperties: PropertyValues):\r\n      boolean {\r\n    return changedProperties.has('country') ||\r\n        changedProperties.has('locationBias') ||\r\n        changedProperties.has('radius') ||\r\n        changedProperties.has('strictBounds') || changedProperties.has('type');\r\n  }\r\n\r\n  private async makeAutocompleteOptions(): Promise<AutocompleteOptions> {\r\n    const {country, locationBias, radius, strictBounds} = this;\r\n    let bounds;\r\n    if (locationBias && radius) {\r\n      const {Circle} =\r\n          await APILoader.importLibrary('maps', this) as typeof google.maps;\r\n      bounds =\r\n          new Circle({center: locationBias, radius}).getBounds() ?? undefined;\r\n    }\r\n    return {\r\n      bounds,\r\n      componentRestrictions: country ? {country} : undefined,\r\n      fields: [...PLACE_RESULT_DATA_FIELDS],\r\n      strictBounds,\r\n      types: this.type ? [this.type] : [],\r\n    };\r\n  }\r\n\r\n  private async initializeAutocomplete(inputElement: HTMLInputElement) {\r\n    const {Autocomplete} = await APILoader.importLibrary('places', this) as\r\n        typeof google.maps.places;\r\n    const autocomplete =\r\n        new Autocomplete(inputElement, await this.makeAutocompleteOptions());\r\n    autocomplete.addListener('place_changed', async () => {\r\n      const result = autocomplete.getPlace();\r\n      if (result?.place_id) {\r\n        this.disableSearch = true;\r\n        this.valueInternal = await makePlaceFromPlaceResult(result, this);\r\n      } else {\r\n        await this.handleSearch();\r\n      }\r\n    });\r\n    this.autocomplete.resolve(autocomplete);\r\n  }\r\n\r\n  /**\r\n   * Fetches a Place object based on input query when the user does not select\r\n   * one of the Place Autocomplete predictions, or null if no result is found.\r\n   */\r\n  private async search(query: string): Promise<Place|null> {\r\n    // tslint:disable-next-line:enforce-name-casing\r\n    const {Place: OrigPlace} =\r\n        (await APILoader.importLibrary('places', this)) as unknown as\r\n        PlacesLibrary;\r\n    // A TextSearch request containing only the Place ID field incurs no charge:\r\n    // https://developers.google.com/maps/documentation/places/web-service/usage-and-billing#id-textsearch.\r\n    const searchRequest = {\r\n      textQuery: query,\r\n      fields: ['id'],\r\n      locationBias: this.autocomplete.value?.getBounds(),\r\n    };\r\n    let places;\r\n    try {\r\n      ({places} = await OrigPlace.searchByText(searchRequest));\r\n    } catch (error: unknown) {\r\n      if (isNotAvailableError(error, 'searchByText()')) {\r\n        // `Place.searchByText()` isn't available in GA; use\r\n        // `PlacesService.findPlaceFromQuery()` as a fallback.\r\n        const findRequest = {\r\n          query,\r\n          fields: ['id'],\r\n          locationBias: this.autocomplete.value?.getBounds(),\r\n        };\r\n        const results = await this.searchWithFindPlaceFromQuery(findRequest);\r\n        places = [];\r\n        for (const placeResult of results) {\r\n          places.push(await makePlaceFromPlaceResult(placeResult, this));\r\n          break;\r\n        }\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n    if (!places.length) return null;\r\n    await places[0].fetchFields({fields: [...PLACE_DATA_FIELDS]});\r\n    return places[0] as Place;\r\n  }\r\n\r\n  /** Looks up a Place using the GA API. */\r\n  private async searchWithFindPlaceFromQuery(\r\n      request: google.maps.places.FindPlaceFromQueryRequest):\r\n      Promise<PlaceResult[]> {\r\n    const {PlacesService} = await APILoader.importLibrary('places', this) as\r\n        google.maps.PlacesLibrary;\r\n    const service = new PlacesService(document.createElement('div'));\r\n    return new Promise((resolve, reject) => {\r\n      service.findPlaceFromQuery(\r\n          {\r\n            ...request,\r\n            fields: mapPlaceFieldsToPlaceResultFields(\r\n                request.fields as Array<keyof Place>)\r\n          },\r\n          (results, status) => {\r\n            if (results && status === 'OK') {\r\n              resolve(results);\r\n            } else {\r\n              reject(status);\r\n            }\r\n          });\r\n    });\r\n  }\r\n\r\n  private handleClear() {\r\n    this.inputElement!.value = '';\r\n    this.valueInternal = undefined;\r\n    this.disableSearch = true;\r\n    this.hideClearButton = true;\r\n  }\r\n\r\n  private handleInput(e: {target: HTMLInputElement}) {\r\n    if (!e.target.value) {\r\n      this.handleClear();\r\n    } else {\r\n      this.disableSearch = false;\r\n      this.hideClearButton = false;\r\n    }\r\n  }\r\n\r\n  private async handleSearch() {\r\n    if (this.disableSearch || !this.inputElement?.value) return;\r\n\r\n    this.disableSearch = true;\r\n    try {\r\n      this.valueInternal = await this.search(this.inputElement.value);\r\n      if (this.valueInternal) this.updateInputTextFromPlace(this.valueInternal);\r\n    } catch (error: unknown) {\r\n      const requestErrorEvent = new RequestErrorEvent(error);\r\n      this.dispatchEvent(requestErrorEvent);\r\n    }\r\n  }\r\n\r\n  private updateInputTextFromPlace(place: Place) {\r\n    let newText;\r\n    if (place.formattedAddress && place.displayName) {\r\n      if (place.formattedAddress.startsWith(place.displayName)) {\r\n        newText = place.formattedAddress;\r\n      } else {\r\n        newText = `${place.displayName}, ${place.formattedAddress}`;\r\n      }\r\n    } else {\r\n      newText = place.displayName ?? place.formattedAddress ?? '';\r\n    }\r\n    if (newText) this.inputElement!.value = newText;\r\n  }\r\n}\r\n"]}