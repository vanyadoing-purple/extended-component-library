{"version":3,"file":"api_loader.js","sourceRoot":"","sources":["../../src/api_loader/api_loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {html, PropertyValues} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\nimport {BaseComponent} from '../base/base_component.js';\r\nimport {ATTRIBUTION_SOURCE_ID, LIBRARY_VERSION} from '../base/constants.js';\r\nimport {LoggingController} from '../base/logging_controller.js';\r\nimport {Deferred} from '../utils/deferred.js';\r\n\r\nimport inlineScript from './inline_script.js';\r\n\r\n/** Returns a reference to `google.maps` from the global scope, if defined. */\r\nfunction getGoogleMaps(): typeof google.maps|undefined {\r\n  try {\r\n    return google?.maps;\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/** Imports Web Components defined by the Maps JavaScript API. */\r\nfunction loadComponentsFromMapsJS(googleMaps: typeof google.maps) {\r\n  googleMaps.importLibrary('maps');\r\n  googleMaps.importLibrary('marker');\r\n}\r\n\r\n/** Returns a `LoggingController` owned by the element, if one exists. */\r\nfunction getLogger(host: HTMLElement): LoggingController|undefined {\r\n  const logger = (host as {logger?: unknown}).logger;\r\n  return logger instanceof LoggingController ? logger : undefined;\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-api-loader': APILoader;\r\n  }\r\n}\r\n\r\n/**\r\n * The API loader component loads the Google Maps Platform libraries necessary\r\n * for Extended Components.\r\n *\r\n * To use this component, make sure you [sign up for Google Maps Platform and\r\n * create an API\r\n * key](https://console.cloud.google.com/google/maps-apis/start).\r\n * By default, the API loader component will request the beta version of the\r\n * Maps JavaScript API, giving you access to additional components [`<gmp-map>`\r\n * and\r\n * `<gmp-advanced-marker>`](https://developers.google.com/maps/documentation/javascript/web-components/overview).\r\n * However, you can set the `version` attribute to select a stable (General\r\n * Availability) version of the SDK such as `weekly`.\r\n */\r\n@customElement('gmpx-api-loader')\r\nexport class APILoader extends BaseComponent {\r\n  /**\r\n   * An alias for the `key` property. React developers should use this prop to\r\n   * set the API key.\r\n   */\r\n  set apiKey(key: string|undefined) {\r\n    this.key = key;\r\n  }\r\n  get apiKey(): string|undefined {\r\n    return this.key;\r\n  }\r\n\r\n  /**\r\n   * Maps JS customers can configure HTTP Referrer Restrictions in the Cloud\r\n   * Console to limit which URLs are allowed to use a particular API Key. This\r\n   * parameter can limit the amount of data sent to Google Maps when evaluating\r\n   * HTTP Referrer Restrictions. Please see the\r\n   * [documentation](https://developers.google.com/maps/documentation/javascript/dynamic-loading#optional_parameters)\r\n   * for more information.\r\n   */\r\n  @property({attribute: 'auth-referrer-policy', reflect: true, type: String})\r\n  authReferrerPolicy?: string;\r\n\r\n  /**\r\n   * (Required) A valid Google Maps Platform API key. If you don't have one\r\n   * already [sign up for Google Maps Platform and create an API\r\n   * key](https://console.cloud.google.com/google/maps-apis/start).\r\n   *\r\n   * React developers are encouraged to use the `apiKey` property instead,\r\n   * as `key` is a reserved word.\r\n   *\r\n   * You can learn more about API keys in the Google Maps Platform\r\n   * [documentation](https://developers.google.com/maps/documentation/javascript/get-api-key).\r\n   */\r\n  @property({reflect: true, type: String}) key?: string;\r\n\r\n  /**\r\n   * The language code; defaults to the user's preferred language setting as\r\n   * specified in the browser when displaying textual information. Read [more on\r\n   * localization](https://developers.google.com/maps/documentation/javascript/localization).\r\n   */\r\n  @property({reflect: true, type: String}) language?: string;\r\n\r\n  /**\r\n   * The region code to use. This alters the map's behavior based on a given\r\n   * country or territory. Read [more on region\r\n   * codes](https://developers.google.com/maps/documentation/javascript/localization#Region).\r\n   */\r\n  @property({reflect: true, type: String}) region?: string;\r\n\r\n  /**\r\n   * To understand usage and ways to improve our solutions, Google includes the\r\n   * `solution_channel` query parameter in API calls to gather information about\r\n   * code usage. You may opt out at any time by setting this attribute to an\r\n   * empty string. Read more in the\r\n   * [documentation](https://developers.google.com/maps/reporting-and-monitoring/reporting#solutions-usage).\r\n   */\r\n  @property({attribute: 'solution-channel', reflect: true, type: String})\r\n  solutionChannel?: string;\r\n\r\n  /**\r\n   * The release channel or version numbers. See the\r\n   * [documentation](https://developers.google.com/maps/documentation/javascript/versions)\r\n   * for more information.\r\n   */\r\n  @property({reflect: true, type: String}) version = 'beta';\r\n\r\n  /** A deferred promise that resolves to the `google.maps` object. */\r\n  private static googleMapsDeferred = new Deferred<typeof google.maps>();\r\n\r\n  /** Whether the inline script has been invoked by this component. */\r\n  private static inlineScriptLoaded = false;\r\n\r\n  /** A single instance of this component used to detect duplicates. */\r\n  private static instance?: APILoader;\r\n\r\n  override async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    if (APILoader.instance) {\r\n      this.logger.warn(\r\n          'Found multiple instances of this element on the same page. ' +\r\n              'The Google Maps JavaScript API can only be configured once; ' +\r\n              'please ensure you only have a single instance.',\r\n          this);\r\n    } else {\r\n      APILoader.instance = this;\r\n    }\r\n  }\r\n\r\n  protected override willUpdate(changedProperties: PropertyValues<this>) {\r\n    // Do not handle updates to any duplicate API loader elements.\r\n    if (APILoader.instance !== this) return;\r\n\r\n    this.tryLoadGoogleMapsAPI(changedProperties);\r\n  }\r\n\r\n  protected override render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n\r\n  private getSolutionChannel(): string|undefined {\r\n    if (this.solutionChannel === '') return undefined;\r\n    if (!this.solutionChannel) {\r\n      return `GMP_${ATTRIBUTION_SOURCE_ID}_extended_v${LIBRARY_VERSION}`;\r\n    }\r\n    return this.solutionChannel;\r\n  }\r\n\r\n  private tryLoadGoogleMapsAPI(changedProperties: PropertyValues<this>) {\r\n    if (APILoader.googleMapsDeferred.value) {\r\n      if (APILoader.inlineScriptLoaded) {\r\n        const changedProperty = changedProperties.keys().next().value;\r\n        this.logger.warn(\r\n            `Property '${changedProperty}' cannot be updated once the ` +\r\n            'Google Maps JavaScript API is already loaded.');\r\n      } else {\r\n        this.logger.warn(\r\n            'Please remove the <gmpx-api-loader> element if you are using ' +\r\n            'the Google Maps JavaScript API inline bootstrap loader. ' +\r\n            'Duplicate configuration may cause unexpected behavior.');\r\n      }\r\n    } else if (this.key !== undefined) {\r\n      const {key, version, language, region, authReferrerPolicy} = this;\r\n      const solutionChannel = this.getSolutionChannel();\r\n      const googleMaps = inlineScript.load({\r\n        key,\r\n        ...(version && {v: version}),\r\n        ...(language && {language}),\r\n        ...(region && {region}),\r\n        ...(solutionChannel && {solutionChannel}),\r\n        ...(authReferrerPolicy && {authReferrerPolicy}),\r\n      });\r\n      APILoader.inlineScriptLoaded = true;\r\n      APILoader.googleMapsDeferred.resolve(googleMaps);\r\n      loadComponentsFromMapsJS(googleMaps);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves a reference to the specified Maps JavaScript API library.\r\n   *\r\n   * Libraries are [loaded dynamically from the Maps JavaScript\r\n   * API](https://developers.google.com/maps/documentation/javascript/dynamic-loading).\r\n   * If an instance of the API is not already available, one will be configured\r\n   * and loaded based on a `<gmpx-api-loader>` element in the document.\r\n   *\r\n   * @param library Name of the library. Full list of libraries can be found in\r\n   *     the\r\n   *     [documentation](https://developers.google.com/maps/documentation/javascript/libraries).\r\n   * @param consumer Optionally specify the custom element requesting the\r\n   *     library to provide more helpful console warnings when a library cannot\r\n   *     be loaded.\r\n   * @returns {ReturnType<typeof google.maps.importLibrary>}\r\n   * @nocollapse\r\n   */\r\n  static async importLibrary(library: string, consumer?: HTMLElement) {\r\n    let googleMaps = APILoader.googleMapsDeferred.value;\r\n    if (!googleMaps) {\r\n      APILoader.pollForGoogleMaps(\r\n          /* numRetries= */ 5, /* interval= */ 1000,\r\n          consumer && getLogger(consumer));\r\n      googleMaps = await APILoader.googleMapsDeferred.promise;\r\n    }\r\n    return googleMaps.importLibrary(library);\r\n  }\r\n\r\n  /**\r\n   * Resets API loader state and removes `google.maps` from the global scope.\r\n   * This method should be invoked for testing purposes only.\r\n   * @ignore\r\n   */\r\n  static reset() {\r\n    delete (window as {google?: typeof google}).google;\r\n    delete APILoader.instance;\r\n    APILoader.inlineScriptLoaded = false;\r\n    APILoader.googleMapsDeferred = new Deferred<typeof google.maps>();\r\n  }\r\n\r\n  /** @nocollapse */\r\n  private static pollForGoogleMaps(\r\n      numRetries: number, interval: number, logger?: LoggingController,\r\n      pollCount = 0) {\r\n    const googleMaps = getGoogleMaps();\r\n    if (googleMaps) {\r\n      // Display a warning if `google.maps` is not present in the global\r\n      // namespace at first, but shows up during subsequent polling period.\r\n      // This indicates that the developer is using the legacy script loader.\r\n      if (!APILoader.inlineScriptLoaded && pollCount > 0) {\r\n        (logger ?? console)\r\n            .warn(\r\n                'Using the legacy Google Maps JavaScript API script loader ' +\r\n                'may result in suboptimal performance. ' +\r\n                'For best results, please include a <gmpx-api-loader> ' +\r\n                '(https://github.com/googlemaps/extended-component-library) ' +\r\n                'or use the inline bootstrap loader ' +\r\n                '(https://goo.gle/js-api-loading) instead.');\r\n      }\r\n      APILoader.googleMapsDeferred.resolve(googleMaps);\r\n      loadComponentsFromMapsJS(googleMaps);\r\n    } else if (numRetries > 0) {\r\n      window.setTimeout(() => {\r\n        APILoader.pollForGoogleMaps(\r\n            numRetries - 1, interval, logger, pollCount + 1);\r\n      }, interval);\r\n    } else {\r\n      // Throw an error if the Maps JavaScript API is not initialized after\r\n      // several polling attempts. This should help developers debug scenarios\r\n      // where they forgot to include an API loader or script tag.\r\n      let errorMessage = logger ?\r\n          logger.formatMessage(\r\n              'The Google Maps JavaScript API is required for this element ' +\r\n              'to function correctly. ') :\r\n          'APILoader.importLibrary(): ' +\r\n              'Unable to initialize the Google Maps JavaScript API. ';\r\n      errorMessage += 'Please ensure you have a <gmpx-api-loader> on the ' +\r\n          'page with a valid API key. ' +\r\n          'https://github.com/googlemaps/extended-component-library';\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}\r\n"]}