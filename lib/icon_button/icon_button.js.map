{"version":3,"file":"icon_button.js","sourceRoot":"","sources":["../../src/icon_button/icon_button.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {css, html, nothing, PropertyValues} from 'lit';\r\nimport {customElement, property, queryAssignedNodes, state} from 'lit/decorators.js';\r\nimport {classMap} from 'lit/directives/class-map.js';\r\nimport {when} from 'lit/directives/when.js';\r\n\r\nimport {BaseComponent} from '../base/base_component.js';\r\nimport {getTypeScaleSizeFromPx, GMPX_BORDER_SEPARATOR, GMPX_COLOR_ON_PRIMARY, GMPX_COLOR_PRIMARY, GMPX_FONT_CAPTION, GMPX_FONT_SIZE_BASE, GMPX_FONT_TITLE_MEDIUM} from '../base/common_styles.js';\r\nimport {WebFont, WebFontController} from '../base/web_font_controller.js';\r\n\r\n/**\r\n * The default icon to show when icon is not specified; this icon will only be\r\n * rendered if the button has no label or is in a condensed layout.\r\n */\r\nconst DEFAULT_ICON = 'add';\r\n\r\n/** Names of variants supported by the Icon Button component. */\r\nconst BUTTON_VARIANTS: ReadonlyArray<IconButton['variant']> =\r\n    Object.freeze(['outlined', 'filled']);\r\n\r\n/** Multiplier to scale margins and paddings based on font size. */\r\nconst SPACING_MULTIPLIER = 0.5;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-icon-button': IconButton;\r\n  }\r\n}\r\n\r\n/**\r\n * The icon button component is used for actions in the UI that help users get\r\n * things done with a single tap. It contains an icon and a text label.\r\n *\r\n * This element is designed to be visually consistent when used with other\r\n * components in the Extended Component Library. For example, Icon Buttons can\r\n * be used in the `action` slot of the [Place\r\n * Overview](../place_overview/README.md) component to provide a consistent look\r\n * and feel.\r\n *\r\n * ![](doc_src/icon-button.png)\r\n *\r\n * @slot - Content to display as the buttonâ€™s label.\r\n *\r\n * @cssproperty [--gmpx-color-primary] - Button text and outline color in the\r\n * `outlined` variant, or background color in `filled` variant.\r\n * @cssproperty [--gmpx-color-on-primary] - Button text color in `filled`\r\n * variant.\r\n * @cssproperty [--gmpx-color-outline] - Outline color.\r\n * @cssproperty [--gmpx-font-size-base] - Font size for the button.\r\n * @cssproperty [--gmpx-font-family-headings] - Font face for the button, except\r\n * for condensed mode.\r\n * @cssproperty [--gmpx-font-family-base] - Font face used when the button is in\r\n * condensed mode.\r\n */\r\n@customElement('gmpx-icon-button')\r\nexport class IconButton extends BaseComponent {\r\n  static override styles = css`\r\n    .container {\r\n      all: unset;\r\n      color: ${GMPX_COLOR_PRIMARY};\r\n      cursor: pointer;\r\n      text-align: center;\r\n    }\r\n\r\n    .icon {\r\n      font-size: ${getTypeScaleSizeFromPx(18)};\r\n    }\r\n\r\n    .layout.condensed {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    .layout.condensed .pill {\r\n      align-self: center;\r\n    }\r\n\r\n    .layout.condensed .label-container {\r\n      font: ${GMPX_FONT_CAPTION};\r\n      margin-top: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\r\n    }\r\n\r\n    .layout.no-label .label-container {\r\n      margin: 0;\r\n    }\r\n\r\n    .layout:not(.condensed):not(.no-label) .pill {\r\n      padding-left: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\r\n      padding-right: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER});\r\n    }\r\n\r\n    .pill {\r\n      align-items: center;\r\n      border-radius: calc(${GMPX_FONT_SIZE_BASE} * (1 + ${SPACING_MULTIPLIER}));\r\n      display: flex;\r\n      font: ${GMPX_FONT_TITLE_MEDIUM};\r\n      justify-content: center;\r\n      overflow: hidden;\r\n      padding: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER} / 2);\r\n      position: relative;\r\n    }\r\n\r\n    .pill > * {\r\n      margin: calc(${GMPX_FONT_SIZE_BASE} * ${SPACING_MULTIPLIER} / 2);\r\n    }\r\n\r\n    .pill.filled {\r\n      background-color: ${GMPX_COLOR_PRIMARY};\r\n      color: ${GMPX_COLOR_ON_PRIMARY};\r\n    }\r\n\r\n    .pill.outlined {\r\n      border: ${GMPX_BORDER_SEPARATOR};\r\n    }\r\n\r\n    .pill .overlay {\r\n      inset: 0;\r\n      margin: 0;\r\n      opacity: 0;\r\n      position: absolute;\r\n    }\r\n\r\n    .pill.outlined .overlay {\r\n      background-color: ${GMPX_COLOR_PRIMARY};\r\n    }\r\n\r\n    .pill.filled .overlay {\r\n      background-color: ${GMPX_COLOR_ON_PRIMARY};\r\n    }\r\n\r\n    .container:hover .overlay {\r\n      opacity: 0.08;\r\n    }\r\n\r\n    .container:focus .overlay {\r\n      opacity: 0.24;\r\n    }\r\n\r\n    .container:active .overlay {\r\n      opacity: 0.32;\r\n    }\r\n  `;\r\n\r\n  // Set up focus delegation; see\r\n  // https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions.\r\n  /** @ignore */\r\n  static override shadowRootOptions = {\r\n    ...BaseComponent.shadowRootOptions,\r\n    delegatesFocus: true,\r\n  };\r\n\r\n  /**\r\n   * Indicates the availability and type of interactive popup element that can\r\n   * be triggered by the button. See:\r\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup.\r\n   *\r\n   * This attribute has no effect when `href` is set.\r\n   */\r\n  @property({attribute: 'aria-haspopup', reflect: true, type: String})\r\n  override ariaHasPopup: 'true'|'dialog'|'menu'|'listbox'|'tree'|'grid'|\r\n      'false' = 'false';\r\n\r\n  /**\r\n   * A description that gets read by assistive devices. In the case of icon-only\r\n   * buttons, you should always include an ARIA label for optimal accessibility.\r\n   */\r\n  @property({attribute: 'aria-label', reflect: true, type: String})\r\n  override ariaLabel: string|null = null;\r\n\r\n  /**\r\n   * Whether to render the button in a condensed layout, where the label appears\r\n   * below the icon.\r\n   */\r\n  @property({reflect: true, type: Boolean}) condensed = false;\r\n\r\n  /**\r\n   * Set this attribute to a URL to have the Icon Button open it in a new tab,\r\n   * when clicked. Alternatively, specify on-click behavior for this component\r\n   * by attaching an event listener.\r\n   *\r\n   * Per accessibility best practice, the component will render its content\r\n   * inside an `<a>` instead of `<button>` element when this attribute is set.\r\n   */\r\n  @property({reflect: true, type: String}) href?: string;\r\n\r\n  /**\r\n   * Name of icon from [Material Symbols Set](https://fonts.google.com/icons) to\r\n   * display before the button label.\r\n   *\r\n   * If icon is unspecified, then a \"+\" icon will be rendered by default. This\r\n   * default icon is omitted if button has a label or other content and is not\r\n   * in condensed layout.\r\n   */\r\n  @property({reflect: true, type: String}) icon?: string;\r\n\r\n  /** Specifies the display style of the button. */\r\n  @property({reflect: true, type: String})\r\n  variant: 'outlined'|'filled' = 'outlined';\r\n\r\n  @state() private hasLabel = false;\r\n\r\n  @queryAssignedNodes({flatten: true})\r\n  private readonly defaultSlotNodes?: Node[];\r\n\r\n  protected readonly fontLoader = new WebFontController(\r\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\r\n\r\n  protected override willUpdate(changedProperties: PropertyValues<this>) {\r\n    // If variant is set to an unsupported value, reset to default & log error.\r\n    if (changedProperties.has('variant') &&\r\n        !BUTTON_VARIANTS.includes(this.variant)) {\r\n      this.logger.error(\r\n          `Value \"${this.variant}\" for attribute \"variant\" is invalid. ` +\r\n          `Acceptable choices are ${\r\n              BUTTON_VARIANTS.map((size) => `\"${size}\"`).join(', ')}.`);\r\n      this.variant = 'outlined';\r\n    }\r\n  }\r\n\r\n  protected override render() {\r\n    if (this.href) {\r\n      return html`\r\n        <a\r\n          aria-label=${this.ariaLabel ?? nothing}\r\n          class=\"container\"\r\n          href=${this.href}\r\n          target=\"_blank\"\r\n        >${this.renderContent()}</a>\r\n      `;\r\n    }\r\n\r\n    return html`\r\n      <button\r\n        aria-haspopup=${this.ariaHasPopup}\r\n        aria-label=${this.ariaLabel ?? nothing}\r\n        class=\"container\"\r\n      >${this.renderContent()}</button>\r\n    `;\r\n  }\r\n\r\n  protected override updated() {\r\n    // If the aria-label attribute is set, hide it from the a11y tree. Otherwise\r\n    // the component and its shadow DOM content show up as duplicate nodes with\r\n    // the same aria-label.\r\n    this.role = this.ariaLabel != null ? 'none' : null;\r\n  }\r\n\r\n  private renderContent() {\r\n    const icon = this.icon ||\r\n        (!this.hasLabel || this.condensed ? DEFAULT_ICON : undefined);\r\n\r\n    // clang-format off\r\n    return html`\r\n      <div class=\"layout ${classMap({\r\n        'condensed': this.condensed,\r\n        'no-label': !this.hasLabel,\r\n      })}\">\r\n        <div class=\"pill ${classMap({\r\n          'filled': this.variant === 'filled',\r\n          'outlined': this.variant !== 'filled',\r\n        })}\">\r\n          <div class=\"overlay\"></div>\r\n          ${when(icon, () => html`\r\n            <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\r\n              ${icon}\r\n            </span>\r\n          `)}\r\n          ${when(!this.condensed, () => this.renderLabel())}\r\n        </div>\r\n        ${when(this.condensed, () => this.renderLabel())}\r\n      </div>\r\n    `;\r\n    // clang-format on\r\n  }\r\n\r\n  private renderLabel() {\r\n    return html`\r\n      <div class=\"label-container\">\r\n        <slot @slotchange=${this.handleSlotChange}></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private handleSlotChange() {\r\n    this.hasLabel =\r\n        Boolean(this.defaultSlotNodes?.map((node) => node.textContent ?? '')\r\n                    .join('')\r\n                    .trim());\r\n  }\r\n}\r\n"]}