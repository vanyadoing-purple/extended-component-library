{"version":3,"file":"split_layout.js","sourceRoot":"","sources":["../../src/split_layout/split_layout.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAC,GAAG,EAAkB,IAAI,EAAC,MAAM,KAAK,CAAC;AAC9C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,KAAK,EAAC,MAAM,yBAAyB,CAAC;AAC9C,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAErD,OAAO,EAAC,aAAa,EAAC,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAC,wBAAwB,EAAC,MAAM,uCAAuC,CAAC;AAQ/E;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,aAAa;IAAvC;;QAwCL;;;;WAIG;QAEH,kBAAa,GAAG,KAAK,CAAC;QAEtB;;;WAGG;QAEH,sBAAiB,GAAG,GAAG,CAAC;QAExB;;;;;WAKG;QAEH,eAAU,GAAG,KAAK,CAAC;QAEF,iBAAY,GAAG,IAAI,CAAC;QAE3B,kBAAa,GACnB,IAAI,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAiDzE,CAAC;IA7CU,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAEQ,oBAAoB;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,CAAC;IACpC,CAAC;IAEkB,UAAU;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAEkB,MAAM;QACvB,MAAM,cAAc,GAAG,IAAI,CAAA;;;;KAI1B,CAAC;QACF,MAAM,aAAa,GAAG,IAAI,CAAA;;;;KAIzB,CAAC;QAEF,OAAO,IAAI,CAAA;yBACU,QAAQ,CAAC;YAC5B,QAAQ,EAAE,CAAC,IAAI,CAAC,YAAY;YAC5B,KAAK,EAAE,IAAI,CAAC,YAAY;SACzB,CAAC;QAEE,KAAK,CACD,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC;YAC9B,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACjD,IAAI,CAAA,GAAG,aAAa,GAAG,cAAc,EAAE,CAAC,CAAC;YACzC,IAAI,CAAA,GAAG,cAAc,GAAG,aAAa,EAAE,CAAC;;KAEnD,CAAC;IACJ,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC;IACjE,CAAC;;AAlHe,kBAAM,GAAmB,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqC3C,AArCqB,CAqCpB;AAQF;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,gBAAgB,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;;kDAChD;AAOtB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,sBAAsB,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC;;sDACnD;AASxB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;;+CAChD;AAEF;IAAhB,KAAK,EAAE;;iDAA6B;AAhE1B,WAAW;IADvB,aAAa,CAAC,mBAAmB,CAAC;GACtB,WAAW,CAoHvB","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {css, CSSResultGroup, html} from 'lit';\r\nimport {customElement, property, state} from 'lit/decorators.js';\r\nimport {cache} from 'lit/directives/cache.js';\r\nimport {classMap} from 'lit/directives/class-map.js';\r\n\r\nimport {BaseComponent} from '../base/base_component.js';\r\nimport {SlotValidationController} from '../base/slot_validation_controller.js';\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-split-layout': SplitLayout;\r\n  }\r\n}\r\n\r\n/**\r\n * The split layout component allows you to display custom HTML information in a\r\n * responsive panel view alongside main content. In a narrow container, such as\r\n * a mobile viewport, the panel will be shown below the main content.\r\n *\r\n * ![](./doc_src/split-layout.png)\r\n *\r\n * **To use this component, you'll need to specify `slot=\"main\"` or\r\n * `slot=\"fixed\"` on its children.** Read more on using slots\r\n * [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots#adding_flexibility_with_slots).\r\n *\r\n * @slot main - Main content.\r\n * @slot fixed - Content to be slotted inside the panel with fixed width/height.\r\n * This panel is displayed on the side of main content when the component has\r\n * sufficient width, or below main content otherwise.\r\n *\r\n * @cssproperty [--gmpx-fixed-panel-width-row-layout=320px] - Controls the fixed\r\n * panel width when the component is displayed in row direction. Main content\r\n * width will adjust automatically to fill remaining space.\r\n * @cssproperty [--gmpx-fixed-panel-height-column-layout=50%] - Controls the\r\n * fixed panel height when the component is displayed in column direction. Main\r\n * content height will adjust automatically to fill remaining space.\r\n */\r\n@customElement('gmpx-split-layout')\r\nexport class SplitLayout extends BaseComponent {\r\n  static override styles: CSSResultGroup = css`\r\n    :host(:not([hidden])) {\r\n      display: block;\r\n      height: 100%;\r\n    }\r\n\r\n    .layout {\r\n      display: flex;\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n\r\n    .layout.column {\r\n      flex-direction: column;\r\n    }\r\n\r\n    .layout.column .fixed-container {\r\n      height: var(--gmpx-fixed-panel-height-column-layout, 50%);\r\n    }\r\n\r\n    .layout.row {\r\n      flex-direction: row;\r\n    }\r\n\r\n    .layout.row .fixed-container {\r\n      width: var(--gmpx-fixed-panel-width-row-layout, 320px);\r\n    }\r\n\r\n    .fixed-container {\r\n      overflow: auto;\r\n      z-index: 1;\r\n    }\r\n\r\n    .main-container {\r\n      flex: 1;\r\n      overflow: auto;\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * By default, the fixed panel is rendered below the main content when layout\r\n   * is in column direction. If this attribute is specified, then the fixed\r\n   * panel will appear above the main content instead.\r\n   */\r\n  @property({attribute: 'column-reverse', reflect: true, type: Boolean})\r\n  columnReverse = false;\r\n\r\n  /**\r\n   * When the componentâ€™s width in pixels is less than this amount, it displays\r\n   * in a mobile-friendly column layout instead.\r\n   */\r\n  @property({attribute: 'row-layout-min-width', reflect: true, type: Number})\r\n  rowLayoutMinWidth = 640;\r\n\r\n  /**\r\n   * By default, the fixed panel is rendered before the main content when layout\r\n   * is in row direction (left for LTR and vice versa). If this attribute is\r\n   * specified, then the fixed panel will appear after the main content instead\r\n   * (right for LTR and vice versa).\r\n   */\r\n  @property({attribute: 'row-reverse', reflect: true, type: Boolean})\r\n  rowReverse = false;\r\n\r\n  @state() private hasRowLayout = true;\r\n\r\n  protected slotValidator =\r\n      new SlotValidationController(this, this.logger, ['main', 'fixed']);\r\n\r\n  private resizeObserver?: ResizeObserver;\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n    this.resizeObserver = new ResizeObserver(() => void this.updateLayout());\r\n    this.resizeObserver.observe(this);\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.resizeObserver?.disconnect();\r\n  }\r\n\r\n  protected override willUpdate() {\r\n    this.updateLayout();\r\n  }\r\n\r\n  protected override render() {\r\n    const fixedContainer = html`\r\n      <div class=\"fixed-container\">\r\n        <slot name=\"fixed\"></slot>\r\n      </div>\r\n    `;\r\n    const mainContainer = html`\r\n      <div class=\"main-container\">\r\n        <slot name=\"main\"></slot>\r\n      </div>\r\n    `;\r\n\r\n    return html`\r\n    <div class=\"layout ${classMap({\r\n      'column': !this.hasRowLayout,\r\n      'row': this.hasRowLayout,\r\n    })}\">\r\n      ${\r\n        cache(\r\n            (this.hasRowLayout && this.rowReverse) ||\r\n                    (!this.hasRowLayout && !this.columnReverse) ?\r\n                html`${mainContainer}${fixedContainer}` :\r\n                html`${fixedContainer}${mainContainer}`)}\r\n    </div>\r\n    `;\r\n  }\r\n\r\n  private updateLayout() {\r\n    this.hasRowLayout = this.clientWidth >= this.rowLayoutMinWidth;\r\n  }\r\n}\r\n"]}