{"version":3,"file":"directions_controller_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_distance_label/directions_controller_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, LitElement} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\n\r\nimport {DirectionsController} from './directions_controller.js';\r\n\r\nconst FAKE_REQUEST: google.maps.DirectionsRequest = {\r\n  origin: {lat: 37.77, lng: -122.447},\r\n  destination: {lat: 37.768, lng: -122.511},\r\n  travelMode: 'DRIVING' as google.maps.TravelMode,\r\n};\r\n\r\n@customElement('gmpx-test-directions-controller-host')\r\nclass TestDirectionsControllerHost extends LitElement {\r\n  directionsController = new DirectionsController(this);\r\n}\r\n\r\ndescribe('DirectionsController', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareControllerHostElement() {\r\n    const root = env.render(html`\r\n      <gmpx-test-directions-controller-host>\r\n      </gmpx-test-directions-controller-host>\r\n    `);\r\n\r\n    const host = root.querySelector<TestDirectionsControllerHost>(\r\n        'gmpx-test-directions-controller-host')!;\r\n    if (!host) {\r\n      throw new Error('Failed to find gmpx-test-directions-controller-host.');\r\n    }\r\n    await env.waitForStability();\r\n    return host;\r\n  }\r\n\r\n  afterEach(() => {\r\n    DirectionsController.reset();\r\n  });\r\n\r\n  const parameters: Array<{error: google.maps.MapsRequestError}> = [\r\n    {\r\n      error: {\r\n        code: 'UNKNOWN_ERROR' as google.maps.DirectionsStatus,\r\n        endpoint: 'DIRECTIONS_ROUTE' as google.maps.MapsNetworkErrorEndpoint,\r\n        name: 'MapsRequestError',\r\n        message:\r\n            'A directions request could not be processed due to a server error.',\r\n      }\r\n    },\r\n    {\r\n      error: {\r\n        code: 'OVER_QUERY_LIMIT' as google.maps.DirectionsStatus,\r\n        endpoint: 'DIRECTIONS_ROUTE' as google.maps.MapsNetworkErrorEndpoint,\r\n        name: 'MapsRequestError',\r\n        message: 'The webpage is not allowed to use the directions service',\r\n      }\r\n    }\r\n  ];\r\n\r\n  parameters.forEach(({error}) => {\r\n    it(`retries failed request due to transient error: ${error.code}`,\r\n       async () => {\r\n         const host = await prepareControllerHostElement();\r\n\r\n         const routesSpy = spyOn(env.fakeGoogleMapsHarness!, 'routeHandler')\r\n                               .and.rejectWith(error);\r\n         await host.directionsController.route(FAKE_REQUEST);\r\n         await host.directionsController.route(FAKE_REQUEST);\r\n\r\n         await env.waitForStability();\r\n         expect(routesSpy).toHaveBeenCalledTimes(2);\r\n       });\r\n  });\r\n\r\n  it('does not retry failed request due to non transient error', async () => {\r\n    const host = await prepareControllerHostElement();\r\n\r\n    const error: google.maps.MapsRequestError = {\r\n      code: 'INVALID_REQUEST' as google.maps.DirectionsStatus,\r\n      endpoint: 'DIRECTIONS_ROUTE' as google.maps.MapsNetworkErrorEndpoint,\r\n      name: 'MapsRequestError',\r\n      message: 'The webpage is not allowed to use the directions service'\r\n    };\r\n\r\n    const routesSpy =\r\n        spyOn(env.fakeGoogleMapsHarness!, 'routeHandler').and.rejectWith(error);\r\n    await host.directionsController.route(FAKE_REQUEST);\r\n    await host.directionsController.route(FAKE_REQUEST);\r\n\r\n    await env.waitForStability();\r\n    expect(routesSpy).toHaveBeenCalledTimes(1);\r\n  });\r\n});\r\n"]}