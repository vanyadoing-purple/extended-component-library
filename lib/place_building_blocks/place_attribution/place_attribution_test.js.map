{"version":3,"file":"place_attribution_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_attribution/place_attribution_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,mCAAmC;AAEnC,OAAO,EAAC,IAAI,EAAiB,MAAM,KAAK,CAAC;AAEzC,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAC,aAAa,EAAC,MAAM,6BAA6B,CAAC;AAE1D,OAAO,EAAC,gBAAgB,EAAC,MAAM,wBAAwB,CAAC;AAGxD,SAAS,mBAAmB,CAAC,GAAW;IACtC,OAAO,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AACzC,CAAC;AAED;;;;GAIG;AACH,SAAS,YAAY,CAAC,UAAwC;IAC5D,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;SACjC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;SAC/B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;AACnC,CAAC;AAED,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,KAAK,UAAU,YAAY,CAAC,QAAwB;QAElD,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAC5D,MAAM,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,KAAK,GAAG,aAAa,CAAC;YAC1B,EAAE,EAAE,YAAY;SACjB,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,IAAI,CAAA,kCAC9B,KAAK,4BAA4B,CAAC,CAAC;QAEvC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,KAAK,GAAG,aAAa,CAAC;YAC1B,EAAE,EAAE,YAAY;YAChB,YAAY,EAAE;gBACZ,EAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,iBAAiB,EAAC;gBACjD,EAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAC;aACrC;SACF,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,IAAI,CAAA,kCAC9B,KAAK,4BAA4B,CAAC,CAAC;QACvC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;aACnD,OAAO,CACJ,mDAAmD;YACnD,6CAA6C,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\n\r\nimport {PlaceAttribution} from './place_attribution.js';\r\n\r\n\r\nfunction simpleStripComments(xml: string): string {\r\n  return xml.replace(/<!--.*?-->/ig, '');\r\n}\r\n\r\n/**\r\n * The inner HTML content of `renderRoot`, equivalent to `renderRoot.innerHTML`\r\n * when its type is `HTMLElement`. This is needed because `DocumentFragment`\r\n * does not have the `innerHTML` property.\r\n */\r\nfunction renderedHTML(renderRoot: HTMLElement|DocumentFragment): string {\r\n  return Array.from(renderRoot.children)\r\n      .map((child) => child.outerHTML)\r\n      .reduce((x, y) => x + y, '');\r\n}\r\n\r\ndescribe('place attribution test', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(template: TemplateResult):\r\n      Promise<PlaceAttribution> {\r\n    const root = env.render(template);\r\n    await env.waitForStability();\r\n    const element = root.querySelector('gmpx-place-attribution');\r\n    if (!element) {\r\n      throw new Error('Element not found');\r\n    }\r\n    return element;\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-attribution');\r\n    expect(el).toBeInstanceOf(PlaceAttribution);\r\n  });\r\n\r\n  it('renders nothing when there is no attribution data', async () => {\r\n    const place = makeFakePlace({\r\n      id: '1234567890',\r\n    });\r\n\r\n    const el = await prepareState(html`<gmpx-place-attribution .place=${\r\n        place}></gmpx-place-attribution>`);\r\n\r\n    expect(el.renderRoot.children).toHaveSize(0);\r\n    expect(el.renderRoot.textContent).toEqual('');\r\n  });\r\n\r\n  it('renders a link and non-link attribution', async () => {\r\n    const place = makeFakePlace({\r\n      id: '1234567890',\r\n      attributions: [\r\n        {provider: 'Foo', providerURI: 'https://foo.com'},\r\n        {provider: 'Bar', providerURI: null}\r\n      ]\r\n    });\r\n\r\n    const el = await prepareState(html`<gmpx-place-attribution .place=${\r\n        place}></gmpx-place-attribution>`);\r\n    expect(simpleStripComments(renderedHTML(el.renderRoot)))\r\n        .toEqual(\r\n            '<a target=\"_blank\" href=\"https://foo.com\">Foo</a>' +\r\n            '<span class=\"sep\">, </span><span>Bar</span>');\r\n  });\r\n});\r\n"]}