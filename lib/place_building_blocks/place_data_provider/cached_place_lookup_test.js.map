{"version":3,"file":"cached_place_lookup_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_data_provider/cached_place_lookup_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\n\r\nimport {CachedPlaceLookup} from './cached_place_lookup.js';\r\n\r\ndescribe('CachedPlaceLookup', () => {\r\n  const env = new Environment();\r\n\r\n  beforeEach(async () => {\r\n    await env.waitForStability();\r\n  });\r\n\r\n  it('makes a new place when none exists', async () => {\r\n    const lookup = new CachedPlaceLookup(10);\r\n    const place = await lookup.getPlace('some id');\r\n    expect(place.id).toEqual('some id');\r\n  });\r\n\r\n  it('returns the existing place when one exists', async () => {\r\n    const lookup = new CachedPlaceLookup(10);\r\n    const place1 = await lookup.getPlace('some id');\r\n    const place2 = await lookup.getPlace('some id');\r\n    expect(place1).toBe(place2);\r\n  });\r\n\r\n  it(`makes one place on repeated synchronous place creation`, async () => {\r\n    const lookup = new CachedPlaceLookup(10);\r\n    const promise1 = lookup.getPlace('some id');\r\n    const promise2 = lookup.getPlace('some id');\r\n    const place1 = await promise1;\r\n    const place2 = await promise2;\r\n    expect(place1).toBe(place2);\r\n  });\r\n\r\n  it('adds a new place with updatePlace', async () => {\r\n    const lookup = new CachedPlaceLookup(10);\r\n    const place = makeFakePlace({id: 'some id'});\r\n    lookup.updatePlace(place);\r\n    expect(await lookup.getPlace('some id')).toBe(place);\r\n  });\r\n\r\n  it('replaces an existing place with updatePlace', async () => {\r\n    const lookup = new CachedPlaceLookup(10);\r\n    const oldPlace = await lookup.getPlace('some id');\r\n    const newPlace = makeFakePlace({id: 'some id'});\r\n    lookup.updatePlace(newPlace);\r\n    expect(await lookup.getPlace('some id')).toBe(newPlace);\r\n    expect(await lookup.getPlace('some id')).not.toBe(oldPlace);\r\n  });\r\n\r\n  it(`doesn't keep places beyond its capacity`, async () => {\r\n    const lookup = new CachedPlaceLookup(1);\r\n    const place = await lookup.getPlace('id1');\r\n    await lookup.getPlace('id2');\r\n    expect(await lookup.getPlace('id1')).not.toBe(place);\r\n  });\r\n});\r\n"]}