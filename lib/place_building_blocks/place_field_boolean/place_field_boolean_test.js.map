{"version":3,"file":"place_field_boolean_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_field_boolean/place_field_boolean_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\nimport {map} from 'lit/directives/map.js';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\nimport {LifecycleSpyController} from '../../testing/lifecycle_spy.js';\r\nimport type {PlaceResult} from '../../utils/googlemaps_types.js';\r\n\r\nimport {BooleanField, PLACE_BOOLEAN_FIELDS, PlaceFieldBoolean} from './place_field_boolean.js';\r\n\r\n\r\nfunction expectTrueSlot(el: PlaceFieldBoolean) {\r\n  const slots = el.renderRoot.querySelectorAll('slot');\r\n  expect(slots.length).toBe(1);\r\n  expect(slots[0].name).toBe('true');\r\n}\r\n\r\nfunction expectFalseSlot(el: PlaceFieldBoolean) {\r\n  const slots = el.renderRoot.querySelectorAll('slot');\r\n  expect(slots.length).toBe(1);\r\n  expect(slots[0].name).toBe('false');\r\n}\r\n\r\nfunction expectNoSlots(el: PlaceFieldBoolean) {\r\n  const slots = el.renderRoot.querySelectorAll('slot');\r\n  expect(slots.length).toBe(0);\r\n}\r\n\r\ndescribe('place field boolean test', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(template: TemplateResult):\r\n      Promise<PlaceFieldBoolean[]> {\r\n    const root = env.render(template);\r\n    await env.waitForStability();\r\n    return Array.from(root.querySelectorAll('gmpx-place-field-boolean'));\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-field-boolean');\r\n    expect(el).toBeInstanceOf(PlaceFieldBoolean);\r\n  });\r\n\r\n  it('renders the true slot for all fields using a fake Place', async () => {\r\n    const truePlace = makeFakePlace({\r\n      id: '1234567890',\r\n      hasCurbsidePickup: true,\r\n      hasDelivery: true,\r\n      hasDineIn: true,\r\n      hasTakeout: true,\r\n      accessibilityOptions: {hasWheelchairAccessibleEntrance: true} as\r\n          google.maps.places.AccessibilityOptions,\r\n      isReservable: true,\r\n      servesBeer: true,\r\n      servesBreakfast: true,\r\n      servesBrunch: true,\r\n      servesDinner: true,\r\n      servesLunch: true,\r\n      servesVegetarianFood: true,\r\n      servesWine: true,\r\n\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      utcOffsetMinutes: 0,\r\n      isOpen: async () => true,\r\n    });\r\n\r\n    const els = await prepareState(html`\r\n      ${map(PLACE_BOOLEAN_FIELDS, field => html`\r\n        <gmpx-place-field-boolean field=\"${field}\" .place=${truePlace}>\r\n        </gmpx-place-field-boolean>\r\n      `)}\r\n    `);\r\n\r\n    for (const el of els) {\r\n      expectTrueSlot(el);\r\n    }\r\n  });\r\n\r\n  it('renders the false slot for all fields using a fake Place', async () => {\r\n    const falsePlace = makeFakePlace({\r\n      id: '1234567890',\r\n      hasCurbsidePickup: false,\r\n      hasDelivery: false,\r\n      hasDineIn: false,\r\n      hasTakeout: false,\r\n      accessibilityOptions: {hasWheelchairAccessibleEntrance: false} as\r\n          google.maps.places.AccessibilityOptions,\r\n      isReservable: false,\r\n      servesBeer: false,\r\n      servesBreakfast: false,\r\n      servesBrunch: false,\r\n      servesDinner: false,\r\n      servesLunch: false,\r\n      servesVegetarianFood: false,\r\n      servesWine: false,\r\n\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      utcOffsetMinutes: 0,\r\n      isOpen: async () => false,\r\n    });\r\n\r\n    const els = await prepareState(html`\r\n      ${map(PLACE_BOOLEAN_FIELDS, field => html`\r\n        <gmpx-place-field-boolean field=\"${field}\" .place=${falsePlace}>\r\n        </gmpx-place-field-boolean>\r\n      `)}\r\n    `);\r\n\r\n    for (const el of els) {\r\n      expectFalseSlot(el);\r\n    }\r\n  });\r\n\r\n  it('renders no slot for null field values', async () => {\r\n    const nullPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      hasCurbsidePickup: null,\r\n      hasDelivery: null,\r\n      hasDineIn: null,\r\n      hasTakeout: null,\r\n      accessibilityOptions: {hasWheelchairAccessibleEntrance: null} as\r\n          google.maps.places.AccessibilityOptions,\r\n      isReservable: null,\r\n      servesBeer: null,\r\n      servesBreakfast: null,\r\n      servesBrunch: null,\r\n      servesDinner: null,\r\n      servesLunch: null,\r\n      servesVegetarianFood: null,\r\n      servesWine: null,\r\n\r\n      businessStatus: null,\r\n      regularOpeningHours: null,\r\n      utcOffsetMinutes: null,\r\n      isOpen: async () => undefined,\r\n    });\r\n\r\n    const els = await prepareState(html`\r\n      ${map(PLACE_BOOLEAN_FIELDS, field => html`\r\n        <gmpx-place-field-boolean field=\"${field}\" .place=${nullPlace}>\r\n        </gmpx-place-field-boolean>\r\n      `)}\r\n    `);\r\n\r\n    for (const el of els) {\r\n      expectNoSlots(el);\r\n    }\r\n  });\r\n\r\n  it('renders no slot for undefined field values', async () => {\r\n    const undefinedPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      isOpen: async () => undefined,\r\n    });\r\n\r\n    const els = await prepareState(html`\r\n      ${map(PLACE_BOOLEAN_FIELDS, field => html`\r\n        <gmpx-place-field-boolean field=\"${field}\" .place=${undefinedPlace}>\r\n        </gmpx-place-field-boolean>\r\n      `)}\r\n    `);\r\n\r\n    for (const el of els) {\r\n      expectNoSlots(el);\r\n    }\r\n  });\r\n\r\n  it('renders no slot when no place is set', async () => {\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-boolean field=\"isOpen()\"></gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expectNoSlots(el);\r\n  });\r\n\r\n  it('renders no slot when no field is set', async () => {\r\n    const place = makeFakePlace({id: '1234567890'});\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-boolean .place=${place}></gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expectNoSlots(el);\r\n  });\r\n\r\n  it('renders no slot when the field name is invalid', async () => {\r\n    const place = makeFakePlace({id: '1234567890'});\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-boolean field=\"${'badField' as BooleanField}\"\r\n                                .place=${place}>\r\n      </gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expectNoSlots(el);\r\n  });\r\n\r\n  it('handles isOpen on a PlaceResult', async () => {\r\n    // Note: tests inject a fake Maps JS API, which stubs out the real\r\n    // Place class constructor with `makeFakePlace()`. Refer to that function's\r\n    // behavior for `isOpen()`, in combination with PlaceBooleanField's own\r\n    // field checking.\r\n    const openPlaceResult: PlaceResult = {\r\n      business_status: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      utc_offset_minutes: 0,\r\n      opening_hours: {\r\n        // This gets discarded and replaced with the fake implementation.\r\n        isOpen: () => undefined\r\n      }\r\n    };\r\n    const closedPlaceResult: PlaceResult = {\r\n      business_status: 'CLOSED_TEMPORARILY' as\r\n          google.maps.places.BusinessStatus,\r\n      utc_offset_minutes: 0,\r\n      opening_hours: {\r\n        // This gets discarded and replaced with the fake implementation.\r\n        isOpen: () => undefined\r\n      }\r\n    };\r\n    const undefinedPlaceResult: PlaceResult = {\r\n      business_status: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n    };\r\n\r\n    const [openEl, closedEl, undefinedEl] = await prepareState(html`\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${openPlaceResult}>\r\n      </gmpx-place-field-boolean>\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${closedPlaceResult}>\r\n      </gmpx-place-field-boolean>\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${undefinedPlaceResult}>\r\n      </gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expectTrueSlot(openEl);\r\n    expectFalseSlot(closedEl);\r\n    expectNoSlots(undefinedEl);\r\n  });\r\n\r\n  it('handles the field value opening_hours.isOpen', async () => {\r\n    const openPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      utcOffsetMinutes: 0,\r\n      isOpen: async () => true,\r\n    });\r\n    const openPlaceResult: PlaceResult = {\r\n      business_status: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      utc_offset_minutes: 0,\r\n      opening_hours: {\r\n        // This gets discarded and replaced with the fake implementation.\r\n        isOpen: () => undefined\r\n      }\r\n    };\r\n\r\n    const [placeEl, placeResultEl] = await prepareState(html`\r\n      <gmpx-place-field-boolean field=\"opening_hours.isOpen()\"\r\n                                .place=${openPlace}>\r\n      </gmpx-place-field-boolean>\r\n      <gmpx-place-field-boolean field=\"opening_hours.isOpen()\"\r\n                                .place=${openPlaceResult}>\r\n      </gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expectTrueSlot(placeEl);\r\n    expectTrueSlot(placeResultEl);\r\n  });\r\n\r\n  it(`doesn't call isOpen if it would call the API`, async () => {\r\n    const isOpenSpy = jasmine.createSpy('isOpen');\r\n    const noBusinessStatusPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      isOpen: isOpenSpy,\r\n    });\r\n    const noOpeningHoursPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      utcOffsetMinutes: 0,\r\n      isOpen: isOpenSpy,\r\n    });\r\n    const noUtcOffsetPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      isOpen: isOpenSpy,\r\n    });\r\n\r\n    await prepareState(html`\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${\r\n        noBusinessStatusPlace}>\r\n      </gmpx-place-field-boolean>\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${noOpeningHoursPlace}>\r\n      </gmpx-place-field-boolean>\r\n      <gmpx-place-field-boolean field=\"isOpen()\" .place=${noUtcOffsetPlace}>\r\n      </gmpx-place-field-boolean>\r\n    `);\r\n\r\n    expect(isOpenSpy).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('polls when displaying isOpen()', async () => {\r\n    const isOpenSpy = jasmine.createSpy('isOpen').and.resolveTo(true);\r\n    const place = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n      utcOffsetMinutes: 0,\r\n      isOpen: isOpenSpy,\r\n    });\r\n\r\n    const [booleanEl] = await prepareState(\r\n        html`<gmpx-place-field-boolean field=\"isOpen()\" .place=${\r\n            place}></gmpx-place-field-boolean>`);\r\n\r\n    expectTrueSlot(booleanEl);\r\n\r\n    isOpenSpy.and.resolveTo(false);\r\n    jasmine.clock().tick(61 * 1000);\r\n    await booleanEl.updateComplete;\r\n\r\n    expectFalseSlot(booleanEl);\r\n  });\r\n\r\n  it('performs only one render for a synchronously accessed property',\r\n     async () => {\r\n       const place = makeFakePlace({id: '123', hasDelivery: true});\r\n       const [el] = await prepareState(html`\r\n      <gmpx-place-field-boolean></gmpx-place-field-boolean>\r\n    `);\r\n       const lifecycleSpy = new LifecycleSpyController();\r\n       el.addController(lifecycleSpy);\r\n\r\n       el.place = place;\r\n       el.field = 'hasDelivery';\r\n       await el.updateComplete;\r\n\r\n       expect(lifecycleSpy.hostUpdatedCount).toBe(1);\r\n     });\r\n\r\n  it('performs two renders for an asynchronously accessed property',\r\n     async () => {\r\n       const place = makeFakePlace({\r\n         id: '1234567890',\r\n         businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n         regularOpeningHours: {periods: [], weekdayDescriptions: []},\r\n         utcOffsetMinutes: 0,\r\n       });\r\n       const [el] = await prepareState(html`\r\n      <gmpx-place-field-boolean></gmpx-place-field-boolean>\r\n    `);\r\n       const lifecycleSpy = new LifecycleSpyController();\r\n       el.addController(lifecycleSpy);\r\n\r\n       el.place = place;\r\n       el.field = 'isOpen()';\r\n       await el.updateComplete;\r\n\r\n       expect(lifecycleSpy.hostUpdatedCount).toBe(2);\r\n     });\r\n});\r\n"]}