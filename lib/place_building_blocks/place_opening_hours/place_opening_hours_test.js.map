{"version":3,"file":"place_opening_hours_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_opening_hours/place_opening_hours_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html} from 'lit';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\nimport {LifecycleSpyController} from '../../testing/lifecycle_spy.js';\r\nimport type {Place, PlaceResult} from '../../utils/googlemaps_types.js';\r\nimport {PlaceFieldBoolean} from '../place_field_boolean/place_field_boolean.js';\r\nimport {PlaceFieldText} from '../place_field_text/place_field_text.js';\r\n\r\nimport {PlaceOpeningHours} from './place_opening_hours.js';\r\n\r\n\r\nconst FAKE_PLACE_PROPS: Pick<Place, 'id'>&Partial<Place> = {\r\n  id: '1234567890',\r\n  businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n  regularOpeningHours: {\r\n    periods: [\r\n      {\r\n        open: {day: 0, hour: 10, minute: 0},\r\n        close: {day: 0, hour: 20, minute: 0},\r\n      },\r\n      {\r\n        open: {day: 6, hour: 10, minute: 0},\r\n        close: {day: 6, hour: 21, minute: 30},\r\n      },\r\n    ],\r\n    weekdayDescriptions: [\r\n      'Monday: Closed',\r\n      'Tuesday: Closed',\r\n      'Wednesday: Closed',\r\n      'Thursday: Closed',\r\n      'Friday: Closed',\r\n      'Saturday: 10:00 AM - 9:30 PM',\r\n      'Sunday: 10:00 AM - 8:00 PM',\r\n    ],\r\n  },\r\n  utcOffsetMinutes: 0,  // Important! Specifies when regularOpeningHours occur.\r\n};\r\n\r\ndescribe('PlaceOpeningHours', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(\r\n      configs: {place: Place|PlaceResult|null, summaryOnly?: boolean}):\r\n      Promise<PlaceOpeningHours> {\r\n    const root = env.render(html`\r\n      <gmpx-place-opening-hours\r\n        .summaryOnly=${configs.summaryOnly ?? false}\r\n        .place=${configs.place}\r\n      ></gmpx-place-opening-hours>\r\n    `);\r\n    await env.waitForStability();\r\n    return root.querySelector<PlaceOpeningHours>('gmpx-place-opening-hours')!;\r\n  }\r\n\r\n  function getClosedSlotText(el: PlaceOpeningHours): string|null|undefined {\r\n    return el.renderRoot.querySelector('div[slot=\"false\"]')?.textContent;\r\n  }\r\n\r\n  function getOpenSlotText(el: PlaceOpeningHours): string|null|undefined {\r\n    return el.renderRoot.querySelector('div[slot=\"true\"]')?.textContent;\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-opening-hours');\r\n    expect(el).toBeInstanceOf(PlaceOpeningHours);\r\n  });\r\n\r\n  it('renders nothing when place data is missing', async () => {\r\n    const el = await prepareState({place: null});\r\n\r\n    expect(el.renderRoot.textContent).toBe('');\r\n  });\r\n\r\n  it('renders nothing when place is operational but opening hours is missing',\r\n     async () => {\r\n       const place =\r\n           makeFakePlace({...FAKE_PLACE_PROPS, regularOpeningHours: undefined});\r\n       const el = await prepareState({place});\r\n\r\n       expect(el.renderRoot.textContent).toBe('');\r\n     });\r\n\r\n  it('renders business status when place is temporarily closed', async () => {\r\n    const place = makeFakePlace({\r\n      ...FAKE_PLACE_PROPS,\r\n      businessStatus: 'CLOSED_TEMPORARILY' as google.maps.places.BusinessStatus,\r\n      regularOpeningHours: undefined,\r\n    });\r\n    const el = await prepareState({place});\r\n\r\n    const fieldText =\r\n        el.renderRoot.querySelector<PlaceFieldText>('gmpx-place-field-text');\r\n    expect(fieldText).not.toBeNull();\r\n    expect(fieldText!.field).toBe('businessStatus');\r\n    expect(fieldText!.place).toBe(place);\r\n  });\r\n\r\n  it('renders default message when missing UTC offset', async () => {\r\n    const place =\r\n        makeFakePlace({...FAKE_PLACE_PROPS, utcOffsetMinutes: undefined});\r\n    const el = await prepareState({place});\r\n\r\n    expect(el.renderRoot.textContent).toContain('See opening hours');\r\n  });\r\n\r\n  it('renders nothing when summary-only and missing UTC offset', async () => {\r\n    const place =\r\n        makeFakePlace({...FAKE_PLACE_PROPS, utcOffsetMinutes: undefined});\r\n    const el = await prepareState({place, summaryOnly: true});\r\n\r\n    expect(el.renderRoot.textContent).toBe('');\r\n  });\r\n\r\n  it('renders based on `isOpen()` when opening hours is present', async () => {\r\n    const place = makeFakePlace(FAKE_PLACE_PROPS);\r\n    const el = await prepareState({place});\r\n\r\n    const fieldBoolean = el.renderRoot.querySelector<PlaceFieldBoolean>(\r\n        'gmpx-place-field-boolean');\r\n    expect(fieldBoolean).not.toBeNull();\r\n    expect(fieldBoolean!.field).toBe('isOpen()');\r\n    expect(fieldBoolean!.place).toBe(place);\r\n  });\r\n\r\n  it('formats closing time correctly', async () => {\r\n    // Saturday, 4/15, 9pm UTC\r\n    jasmine.clock().mockDate(new Date(Date.UTC(2023, 3, 15, 21)));\r\n    const el = await prepareState({place: makeFakePlace(FAKE_PLACE_PROPS)});\r\n\r\n    expect(getOpenSlotText(el))\r\n        .toHaveNormalizedText('Open now · Closes 9:30 PM');\r\n  });\r\n\r\n  it('labels place as open 24 hours when close time is null', async () => {\r\n    const place = makeFakePlace({\r\n      ...FAKE_PLACE_PROPS,\r\n      regularOpeningHours: {\r\n        periods: [\r\n          {\r\n            open: {day: 0, hour: 0, minute: 0},\r\n            close: null,\r\n          },\r\n        ],\r\n        weekdayDescriptions: [],\r\n      },\r\n    });\r\n    const el = await prepareState({place});\r\n\r\n    expect(getOpenSlotText(el)).toHaveNormalizedText('Open 24 hours');\r\n  });\r\n\r\n  it('omits closing time when data is insufficient', async () => {\r\n    const place = makeFakePlace({\r\n      ...FAKE_PLACE_PROPS,\r\n      regularOpeningHours: {\r\n        periods: [],\r\n        weekdayDescriptions: [],\r\n      },\r\n    });\r\n    const el = await prepareState({place});\r\n\r\n    expect(getOpenSlotText(el)).toHaveNormalizedText('Open now');\r\n  });\r\n\r\n  it('formats next opening time correctly - same day', async () => {\r\n    // Saturday, 4/15, 8am UTC\r\n    jasmine.clock().mockDate(new Date(Date.UTC(2023, 3, 15, 8)));\r\n    const place = makeFakePlace(FAKE_PLACE_PROPS);\r\n    const el = await prepareState({place});\r\n\r\n    expect(getClosedSlotText(el))\r\n        .toHaveNormalizedText('Closed · Opens 10:00 AM');\r\n  });\r\n\r\n  it('formats next opening time correctly - different day', async () => {\r\n    // Wednesday, 4/12, 8am UTC\r\n    jasmine.clock().mockDate(new Date(Date.UTC(2023, 3, 12, 8)));\r\n    const place = makeFakePlace(FAKE_PLACE_PROPS);\r\n    const el = await prepareState({place});\r\n\r\n    expect(getClosedSlotText(el))\r\n        .toHaveNormalizedText('Closed · Opens Sat 10:00 AM');\r\n  });\r\n\r\n  it('renders no button or details div with `summaryOnly` set', async () => {\r\n    const el = await prepareState(\r\n        {place: makeFakePlace(FAKE_PLACE_PROPS), summaryOnly: true});\r\n\r\n    const button = el.renderRoot.querySelector('button');\r\n    expect(button).toBeNull();\r\n    const icon = el.renderRoot.querySelector<HTMLSpanElement>('.icon');\r\n    expect(icon).toBeNull();\r\n    const details = el.renderRoot.querySelector<HTMLDivElement>('#details');\r\n    expect(details).toBeNull();\r\n  });\r\n\r\n  it('renders button and details div without `summaryOnly` set', async () => {\r\n    const el = await prepareState(\r\n        {place: makeFakePlace(FAKE_PLACE_PROPS), summaryOnly: false});\r\n\r\n    const button = el.renderRoot.querySelector('button');\r\n    expect(button).not.toBeNull();\r\n    expect(button!.getAttribute('aria-controls')).toBe('details');\r\n    expect(button!.getAttribute('aria-expanded')).toBe('false');\r\n    const icon = el.renderRoot.querySelector<HTMLSpanElement>('.icon');\r\n    expect(icon).not.toBeNull();\r\n    expect(icon!.getAttribute('aria-hidden')).toBe('true');\r\n    expect(icon!.textContent).toHaveNormalizedText('expand_more');\r\n    const details = el.renderRoot.querySelector<HTMLDivElement>('#details');\r\n    expect(details).not.toBeNull();\r\n    expect(details!.getAttribute('aria-label')).toBe('Weekly opening hours');\r\n    expect(details!.getAttribute('role')).toBe('region');\r\n    expect(details!.hidden).toBeTrue();\r\n  });\r\n\r\n  it('toggles details div on button click', async () => {\r\n    const el = await prepareState({place: makeFakePlace(FAKE_PLACE_PROPS)});\r\n    const button = el.renderRoot.querySelector('button')!;\r\n    const icon = el.renderRoot.querySelector<HTMLSpanElement>('.icon')!;\r\n    const details = el.renderRoot.querySelector<HTMLDivElement>('#details')!;\r\n\r\n    button.click();\r\n    await env.waitForStability();\r\n\r\n    expect(button.getAttribute('aria-expanded')).toBe('true');\r\n    expect(icon.textContent).toHaveNormalizedText('expand_less');\r\n    expect(details.hidden).toBeFalse();\r\n\r\n    button.click();\r\n    await env.waitForStability();\r\n\r\n    expect(button.getAttribute('aria-expanded')).toBe('false');\r\n    expect(icon.textContent).toHaveNormalizedText('expand_more');\r\n    expect(details.hidden).toBeTrue();\r\n  });\r\n\r\n  it('renders weekly opening hours inside details div', async () => {\r\n    const el = await prepareState({place: makeFakePlace(FAKE_PLACE_PROPS)});\r\n\r\n    const details = el.renderRoot.querySelector<HTMLDivElement>('#details');\r\n    expect(details?.textContent)\r\n        .toHaveNormalizedText(\r\n            FAKE_PLACE_PROPS.regularOpeningHours!.weekdayDescriptions.join(\r\n                ' '));\r\n  });\r\n\r\n  it('polls for updates when a Place is set', async () => {\r\n    // Saturday, 4/15, 7pm UTC (should close 9:30 pm)\r\n    jasmine.clock().mockDate(new Date(Date.UTC(2023, 3, 15, 19)));\r\n    const place = makeFakePlace(FAKE_PLACE_PROPS);\r\n    const el = await prepareState({place: null});\r\n    const lifecycleSpy = new LifecycleSpyController();\r\n    el.addController(lifecycleSpy);\r\n    el.place = place;\r\n    await el.updateComplete;\r\n    const initialUpdateCount = lifecycleSpy.hostUpdateCount;\r\n\r\n    // Sunday, 4/16, 7pm UTC (should close 8 pm)\r\n    jasmine.clock().mockDate(new Date(Date.UTC(2023, 3, 16, 19)));\r\n    jasmine.clock().tick(61 * 1000);\r\n    await el.updateComplete;\r\n\r\n    expect(lifecycleSpy.hostUpdateCount).toBe(initialUpdateCount + 1);\r\n    expect(getOpenSlotText(el))\r\n        .toHaveNormalizedText('Open now · Closes 8:00 PM');\r\n  });\r\n\r\n  it('does not poll for updates when place is no longer set', async () => {\r\n    const el = await prepareState({place: makeFakePlace(FAKE_PLACE_PROPS)});\r\n    const lifecycleSpy = new LifecycleSpyController();\r\n    el.addController(lifecycleSpy);\r\n    el.place = null;\r\n    await el.updateComplete;\r\n    const initialUpdateCount = lifecycleSpy.hostUpdateCount;\r\n\r\n    jasmine.clock().tick(61 * 1000);\r\n    await el.updateComplete;\r\n\r\n    expect(lifecycleSpy.hostUpdateCount).toBe(initialUpdateCount);\r\n  });\r\n});\r\n"]}