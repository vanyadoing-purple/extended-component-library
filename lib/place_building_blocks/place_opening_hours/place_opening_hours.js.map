{"version":3,"file":"place_opening_hours.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_opening_hours/place_opening_hours.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport '../place_field_boolean/place_field_boolean.js';\r\nimport '../place_field_text/place_field_text.js';\r\n\r\nimport {css, html, nothing, PropertyValues} from 'lit';\r\nimport {customElement, property, state} from 'lit/decorators.js';\r\nimport {map} from 'lit/directives/map.js';\r\n\r\nimport {LocalizationController} from '../../base/localization_controller.js';\r\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\r\nimport type {Place} from '../../utils/googlemaps_types.js';\r\nimport {formatTimeWithWeekdayMaybe, getUpcomingCloseTime, getUpcomingOpenTime, isSoon, NextCloseTimeStatus, NextOpenTimeStatus} from '../../utils/opening_hours.js';\r\nimport {Poll} from '../../utils/poll.js';\r\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\r\n\r\n\r\nconst POLLING_INTERVAL_MS = 60 * 1000;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-place-opening-hours': PlaceOpeningHours;\r\n  }\r\n}\r\n\r\n/**\r\n * Component that renders a summary of the place’s current opening status and an\r\n * accordion that shows the weekly opening hours when expanded.\r\n *\r\n * This component will display content only if there is sufficient data to\r\n * calculate the place’s opening status (unless the place is not operational, in\r\n * which case it will render the place’s business status instead). A place’s\r\n * opening status is determined by its business status, opening hours periods,\r\n * and UTC offset minutes.\r\n *\r\n * @cssproperty [--gmpx-hours-color-open] - Text color when the place is\r\n * currently open.\r\n * @cssproperty [--gmpx-hours-color-closed] - Text color when the place\r\n * is currently closed.\r\n */\r\n@customElement('gmpx-place-opening-hours')\r\nexport class PlaceOpeningHours extends PlaceDataConsumer {\r\n  static override styles = css`\r\n    button {\r\n      align-items: center;\r\n      background: none;\r\n      border: none;\r\n      color: inherit;\r\n      cursor: pointer;\r\n      display: flex;\r\n      font: inherit;\r\n      padding: 0;\r\n    }\r\n\r\n    span {\r\n      display: inline-block;\r\n    }\r\n\r\n    ul {\r\n      list-style-type: none;\r\n      padding: 0;\r\n    }\r\n\r\n    .closed {\r\n      color: var(--gmpx-hours-color-closed, #d50000);\r\n    }\r\n\r\n    .open {\r\n      color: var(--gmpx-hours-color-open, #188038);\r\n    }\r\n\r\n    .icon {\r\n      direction: inherit;\r\n      font-size: inherit;\r\n      margin-inline-start: 1rem;\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * Render only the summary line, without the accordion containing weekly\r\n   * opening hours.\r\n   */\r\n  @property({attribute: 'summary-only', reflect: true, type: Boolean})\r\n  summaryOnly = false;\r\n\r\n  @state() private expanded = false;\r\n\r\n  private readonly poll = new Poll();\r\n\r\n  protected readonly fontLoader =\r\n      new WebFontController(this, [WebFont.MATERIAL_SYMBOLS_OUTLINED]);\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.poll.stop();\r\n  }\r\n\r\n  protected override willUpdate(changedProperties: PropertyValues<this>) {\r\n    super.willUpdate(changedProperties);\r\n\r\n    // Set up polled updates.\r\n    this.poll.stop();\r\n    if (this.getPlace()) {\r\n      this.poll.start(() => void this.requestUpdate(), POLLING_INTERVAL_MS);\r\n    }\r\n  }\r\n\r\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\r\n\r\n  protected override render() {\r\n    const place = this.getPlace();\r\n    if (!place) return nothing;\r\n\r\n    // If opening hours data is missing, try to render business status instead.\r\n    if (!place.regularOpeningHours) {\r\n      if (place.businessStatus === 'OPERATIONAL') return nothing;\r\n      return html`\r\n        <div class=\"closed\">\r\n          <gmpx-place-field-text field=\"businessStatus\" .place=${place}>\r\n          </gmpx-place-field-text>\r\n        </div>\r\n      `;\r\n    }\r\n    const {weekdayDescriptions} = place.regularOpeningHours;\r\n\r\n    // if UTC offset data is missing, omit opening status from the summary.\r\n    let summary;\r\n    if (place.utcOffsetMinutes == null) {\r\n      summary = this.summaryOnly ?\r\n          html`` :\r\n          html`${this.getMsg('PLACE_OPENING_HOURS_DEFAULT_SUMMARY')}`;\r\n    } else {\r\n      summary = html`\r\n        <gmpx-place-field-boolean field=\"isOpen()\" .place=${place}>\r\n          <div slot=\"true\">${this.getOpenSummaryContent(place)}</div>\r\n          <div slot=\"false\">${this.getClosedSummaryContent(place)}</div>\r\n        </gmpx-place-field-boolean>\r\n      `;\r\n    }\r\n    if (this.summaryOnly) return summary;\r\n\r\n    return html`\r\n      <button\r\n        aria-controls=\"details\"\r\n        aria-expanded=${this.expanded}\r\n        @click=${() => this.expanded = !this.expanded}\r\n        type=\"button\"\r\n      >\r\n        ${summary}\r\n        <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\r\n          ${this.expanded ? 'expand_less' : 'expand_more'}\r\n        </span>\r\n      </button>\r\n      <div\r\n        aria-label=${this.getMsg('PLACE_OPENING_HOURS_ARIA_LABEL')}\r\n        .hidden=${!this.expanded}\r\n        id=\"details\"\r\n        role=\"region\"\r\n      >\r\n        <ul>\r\n          ${map(weekdayDescriptions, (description) => html`\r\n            <li>${description}</li>\r\n          `)}\r\n        </ul>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /** @ignore */\r\n  getRequiredFields(): Array<keyof Place> {\r\n    return ['businessStatus', 'regularOpeningHours', 'utcOffsetMinutes'];\r\n  }\r\n\r\n  protected override placeHasData(place: Place): boolean {\r\n    if (place.businessStatus === 'OPERATIONAL' && !place.regularOpeningHours) {\r\n      return false;\r\n    }\r\n    return !!(place.businessStatus || place.regularOpeningHours);\r\n  }\r\n\r\n  private getOpenSummaryContent(place: Place) {\r\n    const {status, closePoint, closeDate} = getUpcomingCloseTime(place);\r\n    const openNowMessage =\r\n        html`<span class=\"open\">${this.getMsg('PLACE_OPEN_NOW')}</span>`;\r\n    if (status === NextCloseTimeStatus.ALWAYS_OPEN) {\r\n      return html`<span class=\"open\">${\r\n          this.getMsg('PLACE_OPEN_ALWAYS')}</span>`;\r\n    } else if (\r\n        (status === NextCloseTimeStatus.WILL_CLOSE) && isSoon(closeDate!)) {\r\n      return html`\r\n        ${openNowMessage}\r\n        ·\r\n        <span>${\r\n          this.getMsg(\r\n              'PLACE_CLOSES',\r\n              formatTimeWithWeekdayMaybe(closePoint!, closeDate!))}</span>\r\n      `;\r\n    } else if (status === NextCloseTimeStatus.NOT_OPEN_NOW) {\r\n      // In this case, the summary content isn't displayed by the Place Boolean\r\n      // Field component anyway. Return the default summary.\r\n    }\r\n    return openNowMessage;\r\n  }\r\n\r\n  private getClosedSummaryContent(place: Place) {\r\n    const {status, openPoint, openDate} = getUpcomingOpenTime(place);\r\n\r\n    let nextOpenInfo = html``;\r\n    if (status === NextOpenTimeStatus.WILL_OPEN) {\r\n      nextOpenInfo = html` · <span>${\r\n          this.getMsg(\r\n              'PLACE_OPENS',\r\n              formatTimeWithWeekdayMaybe(openPoint!, openDate!))}</span>`;\r\n    } else if (status === NextOpenTimeStatus.ALREADY_OPEN) {\r\n      // In this case, the summary content isn't displayed by the Place Boolean\r\n      // Field component anyway. Return the default summary.\r\n    }\r\n\r\n    return html`\r\n      <span class=\"closed\">${this.getMsg('PLACE_CLOSED')}</span>\r\n      ${nextOpenInfo}\r\n    `;\r\n  }\r\n}\r\n"]}