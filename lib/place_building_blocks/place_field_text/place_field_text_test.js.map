{"version":3,"file":"place_field_text_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_field_text/place_field_text_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\nimport {map} from 'lit/directives/map.js';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {FakeLatLng} from '../../testing/fake_lat_lng.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\nimport type {PlaceResult} from '../../utils/googlemaps_types.js';\r\n\r\nimport {PLACE_RESULT_TEXT_FIELDS, PLACE_TEXT_FIELDS, PlaceFieldText, TextField} from './place_field_text.js';\r\n\r\nfunction getText(root: HTMLElement, field?: TextField): string|null|undefined {\r\n  if (field === undefined) {\r\n    return root.querySelector('gmpx-place-field-text')!.renderRoot.textContent;\r\n  } else {\r\n    const query = `gmpx-place-field-text[field=\"${field}\"]`;\r\n    return root.querySelector<PlaceFieldText>(query)!.renderRoot.textContent;\r\n  }\r\n}\r\n\r\nconst fakePlace = makeFakePlace({\r\n  businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n  displayName: 'Name',\r\n  formattedAddress: '123 Main Street',\r\n  id: '1234567890',\r\n  internationalPhoneNumber: '+1 234-567-8910',\r\n  location: new FakeLatLng(1, 2),\r\n  nationalPhoneNumber: '(234) 567-8910',\r\n  plusCode: {\r\n    compoundCode: '1234+AB Some Place',\r\n    globalCode: 'ABCD1234+AB',\r\n  },\r\n  rating: 4.5,\r\n  types: ['restaurant'],\r\n  userRatingCount: 123,\r\n});\r\n\r\nconst placeResult: PlaceResult = {\r\n  business_status: 'OPERATIONAL' as google.maps.places.BusinessStatus,\r\n  name: 'Name',\r\n  formatted_address: '123 Main Street',\r\n  place_id: '1234567890',\r\n  international_phone_number: '+1 234-567-8910',\r\n  geometry: {\r\n    location: new FakeLatLng(1, 2),\r\n  },\r\n  formatted_phone_number: '(234) 567-8910',\r\n  plus_code: {\r\n    compound_code: '1234+AB Some Place',\r\n    global_code: 'ABCD1234+AB',\r\n  },\r\n  rating: 4.5,\r\n  types: ['restaurant'],\r\n  user_ratings_total: 123,\r\n};\r\n\r\ndescribe('PlaceFieldText', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(template: TemplateResult):\r\n      Promise<PlaceFieldText[]> {\r\n    const root = env.render(template);\r\n    await env.waitForStability();\r\n    return Array.from(root.querySelectorAll('gmpx-place-field-text'));\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-field-text');\r\n    expect(el).toBeInstanceOf(PlaceFieldText);\r\n  });\r\n\r\n  it('renders all fields using a fake Place and Place fields', async () => {\r\n    const root = env.render(html`\r\n      ${map(PLACE_TEXT_FIELDS, field => html`\r\n        <gmpx-place-field-text .place=${fakePlace} field=\"${field}\">\r\n        </gmpx-place-field-text>\r\n      `)}\r\n    `);\r\n    await env.waitForStability();\r\n\r\n    expect(getText(root, 'businessStatus')).toBe('Operational');\r\n    expect(getText(root, 'displayName')).toBe('Name');\r\n    expect(getText(root, 'formattedAddress')).toBe('123 Main Street');\r\n    expect(getText(root, 'id')).toBe('1234567890');\r\n    expect(getText(root, 'internationalPhoneNumber')).toBe('+1 234-567-8910');\r\n    expect(getText(root, 'location')).toBe('(1,2)');\r\n    expect(getText(root, 'location.lat')).toBe('1');\r\n    expect(getText(root, 'location.lng')).toBe('2');\r\n    expect(getText(root, 'nationalPhoneNumber')).toBe('(234) 567-8910');\r\n    expect(getText(root, 'plusCode.compoundCode')).toBe('1234+AB Some Place');\r\n    expect(getText(root, 'plusCode.globalCode')).toBe('ABCD1234+AB');\r\n    expect(getText(root, 'rating')).toBe('4.5');\r\n    expect(getText(root, 'types')).toBe('Restaurant');\r\n    expect(getText(root, 'userRatingCount')).toBe('123');\r\n  });\r\n\r\n  it('renders all fields using a PlaceResult and Place fields', async () => {\r\n    const root = env.render(html`\r\n      ${map(PLACE_TEXT_FIELDS, field => html`\r\n        <gmpx-place-field-text .place=${placeResult} field=\"${field}\">\r\n        </gmpx-place-field-text>\r\n      `)}\r\n    `);\r\n    await env.waitForStability();\r\n\r\n    expect(getText(root, 'businessStatus')).toBe('Operational');\r\n    expect(getText(root, 'displayName')).toBe('Name');\r\n    expect(getText(root, 'formattedAddress')).toBe('123 Main Street');\r\n    expect(getText(root, 'id')).toBe('1234567890');\r\n    expect(getText(root, 'internationalPhoneNumber')).toBe('+1 234-567-8910');\r\n    expect(getText(root, 'location')).toBe('(1,2)');\r\n    expect(getText(root, 'location.lat')).toBe('1');\r\n    expect(getText(root, 'location.lng')).toBe('2');\r\n    expect(getText(root, 'nationalPhoneNumber')).toBe('(234) 567-8910');\r\n    expect(getText(root, 'plusCode.compoundCode')).toBe('1234+AB Some Place');\r\n    expect(getText(root, 'plusCode.globalCode')).toBe('ABCD1234+AB');\r\n    expect(getText(root, 'rating')).toBe('4.5');\r\n    expect(getText(root, 'types')).toBe('Restaurant');\r\n    expect(getText(root, 'userRatingCount')).toBe('123');\r\n  });\r\n\r\n  it('renders all fields using a fake Place and PlaceResult fields',\r\n     async () => {\r\n       const root = env.render(html`\r\n         ${map(PLACE_RESULT_TEXT_FIELDS, field => html`\r\n           <gmpx-place-field-text .place=${fakePlace} field=\"${field}\">\r\n           </gmpx-place-field-text>\r\n         `)}\r\n       `);\r\n       await env.waitForStability();\r\n\r\n       expect(getText(root, 'business_status')).toBe('Operational');\r\n       expect(getText(root, 'name')).toBe('Name');\r\n       expect(getText(root, 'formatted_address')).toBe('123 Main Street');\r\n       expect(getText(root, 'place_id')).toBe('1234567890');\r\n       expect(getText(root, 'international_phone_number'))\r\n           .toBe('+1 234-567-8910');\r\n       expect(getText(root, 'geometry.location')).toBe('(1,2)');\r\n       expect(getText(root, 'geometry.location.lat')).toBe('1');\r\n       expect(getText(root, 'geometry.location.lng')).toBe('2');\r\n       expect(getText(root, 'formatted_phone_number')).toBe('(234) 567-8910');\r\n       expect(getText(root, 'plus_code.compound_code'))\r\n           .toBe('1234+AB Some Place');\r\n       expect(getText(root, 'plus_code.global_code')).toBe('ABCD1234+AB');\r\n       expect(getText(root, 'rating')).toBe('4.5');\r\n       expect(getText(root, 'types')).toBe('Restaurant');\r\n       expect(getText(root, 'user_ratings_total')).toBe('123');\r\n     });\r\n\r\n  it('renders all fields using a PlaceResult and PlaceResult fields',\r\n     async () => {\r\n       const root = env.render(html`\r\n         ${map(PLACE_RESULT_TEXT_FIELDS, field => html`\r\n           <gmpx-place-field-text .place=${placeResult} field=\"${field}\">\r\n           </gmpx-place-field-text>\r\n         `)}\r\n       `);\r\n       await env.waitForStability();\r\n\r\n       expect(getText(root, 'business_status')).toBe('Operational');\r\n       expect(getText(root, 'name')).toBe('Name');\r\n       expect(getText(root, 'formatted_address')).toBe('123 Main Street');\r\n       expect(getText(root, 'place_id')).toBe('1234567890');\r\n       expect(getText(root, 'international_phone_number'))\r\n           .toBe('+1 234-567-8910');\r\n       expect(getText(root, 'geometry.location')).toBe('(1,2)');\r\n       expect(getText(root, 'geometry.location.lat')).toBe('1');\r\n       expect(getText(root, 'geometry.location.lng')).toBe('2');\r\n       expect(getText(root, 'formatted_phone_number')).toBe('(234) 567-8910');\r\n       expect(getText(root, 'plus_code.compound_code'))\r\n           .toBe('1234+AB Some Place');\r\n       expect(getText(root, 'plus_code.global_code')).toBe('ABCD1234+AB');\r\n       expect(getText(root, 'rating')).toBe('4.5');\r\n       expect(getText(root, 'types')).toBe('Restaurant');\r\n       expect(getText(root, 'user_ratings_total')).toBe('123');\r\n     });\r\n\r\n  it('renders nothing when no place is set', async () => {\r\n    const root = env.render(html`\r\n      <gmpx-place-field-text field=\"id\"></gmpx-place-field-text>\r\n    `);\r\n    await env.waitForStability();\r\n\r\n    expect(getText(root)).toBe('');\r\n  });\r\n\r\n  it('renders nothing when no field is set', async () => {\r\n    const place = makeFakePlace({id: '1234567890'});\r\n    const root = env.render(html`\r\n      <gmpx-place-field-text .place=${place}></gmpx-place-field-text>\r\n    `);\r\n    await env.waitForStability();\r\n\r\n    expect(getText(root)).toBe('');\r\n  });\r\n\r\n  it('renders nothing when the field name is invalid', async () => {\r\n    const place = makeFakePlace({id: '1234567890'});\r\n    const root = env.render(html`\r\n      <gmpx-place-field-text field=\"${'badField' as TextField}\" .place=${place}>\r\n      </gmpx-place-field-text>\r\n    `);\r\n    await env.waitForStability();\r\n\r\n    expect(getText(root)).toBe('');\r\n  });\r\n\r\n  it('renders all business statuses correctly', async () => {\r\n    const operationalPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'OPERATIONAL' as google.maps.places.BusinessStatus\r\n    });\r\n    const permanentPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'CLOSED_PERMANENTLY' as google.maps.places.BusinessStatus\r\n    });\r\n    const temporaryPlace = makeFakePlace({\r\n      id: '1234567890',\r\n      businessStatus: 'CLOSED_TEMPORARILY' as google.maps.places.BusinessStatus\r\n    });\r\n    const [operationalField, permanentField, temporaryField] =\r\n        await prepareState(html`\r\n      <gmpx-place-field-text field=\"businessStatus\" .place=${operationalPlace}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"businessStatus\" .place=${permanentPlace}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"businessStatus\" .place=${temporaryPlace}>\r\n      </gmpx-place-field-text>\r\n    `);\r\n\r\n    expect(operationalField.renderRoot.textContent).toBe('Operational');\r\n    expect(permanentField.renderRoot.textContent).toBe('Permanently closed');\r\n    expect(temporaryField.renderRoot.textContent).toBe('Temporarily closed');\r\n  });\r\n\r\n  it('formats place types correctly', async () => {\r\n    // clang-format off\r\n    const fields = await prepareState(html`\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['park']})}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['post_office']})}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['home_goods_store']})}>\r\n      </gmpx-place-field-text>\r\n    `);\r\n    // clang-format on\r\n\r\n    expect(fields[0].renderRoot.textContent).toBe('Park');\r\n    expect(fields[1].renderRoot.textContent).toBe('Post office');\r\n    expect(fields[2].renderRoot.textContent).toBe('Home goods store');\r\n  });\r\n\r\n  it('renders the first allowed place type', async () => {\r\n    // clang-format off\r\n    const fields = await prepareState(html`\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: []})}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['invalid']})}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['invalid', 'park']})}>\r\n      </gmpx-place-field-text>\r\n      <gmpx-place-field-text field=\"types\"\r\n          .place=${makeFakePlace({id: '', types: ['park', 'zoo']})}>\r\n      </gmpx-place-field-text>\r\n    `);\r\n    // clang-format on\r\n\r\n    expect(fields[0].renderRoot.textContent).toBe('');\r\n    expect(fields[1].renderRoot.textContent).toBe('');\r\n    expect(fields[2].renderRoot.textContent).toBe('Park');\r\n    expect(fields[2].renderRoot.textContent).toBe('Park');\r\n  });\r\n});\r\n"]}