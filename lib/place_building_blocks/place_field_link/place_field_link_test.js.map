{"version":3,"file":"place_field_link_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_field_link/place_field_link_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\nimport type {PlaceResult} from '../../utils/googlemaps_types.js';\r\n\r\nimport {PlaceFieldLink} from './place_field_link.js';\r\n\r\n\r\nconst fakePlace = makeFakePlace({\r\n  id: '1234567890',\r\n  googleMapsURI: 'https://maps.google.com/',\r\n  websiteURI: 'https://www.mywebsite.com/',\r\n});\r\n\r\nconst fakePlaceResult: PlaceResult = {\r\n  url: 'https://maps.google.com/',\r\n  website: 'https://www.mywebsite.com/',\r\n};\r\n\r\nfunction getHref(el: PlaceFieldLink) {\r\n  return el.renderRoot.querySelector('a')!.href;\r\n}\r\n\r\ndescribe('PlaceFieldLink', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(template: TemplateResult):\r\n      Promise<PlaceFieldLink[]> {\r\n    const root = env.render(template);\r\n    await env.waitForStability();\r\n    return Array.from(root.querySelectorAll('gmpx-place-field-link'));\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-field-link');\r\n    expect(el).toBeInstanceOf(PlaceFieldLink);\r\n  });\r\n\r\n  it('sets the right href using a Place', async () => {\r\n    const [mapsEl1, mapsEl2, websiteEl1, websiteEl2] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"googleMapsURI\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"url\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"websiteURI\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"website\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(getHref(mapsEl1)).toBe('https://maps.google.com/');\r\n    expect(getHref(mapsEl2)).toBe('https://maps.google.com/');\r\n    expect(getHref(websiteEl1)).toBe('https://www.mywebsite.com/');\r\n    expect(getHref(websiteEl2)).toBe('https://www.mywebsite.com/');\r\n  });\r\n\r\n  it('sets the right href using a PlaceResult', async () => {\r\n    const [mapsEl1, mapsEl2, websiteEl1, websiteEl2] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlaceResult} \r\n                             href-field=\"googleMapsURI\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlaceResult} href-field=\"url\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlaceResult} href-field=\"websiteURI\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlaceResult} href-field=\"website\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(getHref(mapsEl1)).toBe('https://maps.google.com/');\r\n    expect(getHref(mapsEl2)).toBe('https://maps.google.com/');\r\n    expect(getHref(websiteEl1)).toBe('https://www.mywebsite.com/');\r\n    expect(getHref(websiteEl2)).toBe('https://www.mywebsite.com/');\r\n  });\r\n\r\n  it('sets the right default link text', async () => {\r\n    const [mapsEl, websiteEl] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"googleMapsURI\">\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"websiteURI\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(mapsEl.renderRoot.querySelectorAll('slot').length).toBe(0);\r\n    expect(websiteEl.renderRoot.querySelectorAll('slot').length).toBe(0);\r\n    expect(mapsEl.renderRoot.textContent!.trim()).toBe('View on Google Maps');\r\n    expect(websiteEl.renderRoot.textContent!.trim()).toBe('mywebsite.com');\r\n  });\r\n\r\n  it('slots custom link text', async () => {\r\n    const [mapsEl, websiteEl] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"googleMapsURI\">\r\n        Custom maps link\r\n      </gmpx-place-field-link>\r\n      <gmpx-place-field-link .place=${fakePlace} href-field=\"websiteURI\">\r\n        Custom site link\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(mapsEl.renderRoot.querySelectorAll('slot').length).toBe(1);\r\n    expect(websiteEl.renderRoot.querySelectorAll('slot').length).toBe(1);\r\n  });\r\n\r\n  it('renders nothing when no place is set', async () => {\r\n    const [mapsEl] = await prepareState(html`\r\n      <gmpx-place-field-link href-field=\"googleMapsURI\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(mapsEl.renderRoot.textContent).toBe('');\r\n    expect(mapsEl.renderRoot.children.length).toBe(0);\r\n  });\r\n\r\n  it('renders nothing when no URL is available', async () => {\r\n    const nullWebsitePlace = makeFakePlace({\r\n      id: '1234567890',\r\n      websiteURI: null,\r\n    });\r\n    const [websiteEl] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${nullWebsitePlace} href-field=\"websiteURI\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(websiteEl.renderRoot.textContent).toBe('');\r\n    expect(websiteEl.renderRoot.children.length).toBe(0);\r\n  });\r\n\r\n  it(`defaults href-field to websiteURI when it's not set`, async () => {\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace}>\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(getHref(el)).toBe('https://www.mywebsite.com/');\r\n  });\r\n\r\n  it(`forwards aria-label to the anchor element`, async () => {\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace} aria-label=\"My Label\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    const anchor = el.renderRoot.querySelector('a')!;\r\n    expect(anchor.getAttribute('aria-label')).toBe('My Label');\r\n  });\r\n\r\n  it(`omits aria-label from the anchor element when not set`, async () => {\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace}>\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    const anchor = el.renderRoot.querySelector('a')!;\r\n    expect(anchor.hasAttribute('aria-label')).toBeFalse();\r\n  });\r\n\r\n  it('sets role=\"none\" on the host when aria-label is present', async () => {\r\n    const [el] = await prepareState(html`\r\n      <gmpx-place-field-link .place=${fakePlace} aria-label=\"My Label\">\r\n      </gmpx-place-field-link>\r\n    `);\r\n\r\n    expect(el.role).toBe('none');\r\n  });\r\n});\r\n"]}