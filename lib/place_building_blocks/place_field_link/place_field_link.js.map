{"version":3,"file":"place_field_link.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_field_link/place_field_link.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {css, html, nothing} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\nimport {when} from 'lit/directives/when.js';\r\n\r\nimport type {Place} from '../../utils/googlemaps_types.js';\r\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\r\n\r\n\r\n/**\r\n * Supported field names for `PlaceFieldLink`, formatted as `Place` fields.\r\n */\r\nexport const PLACE_LINK_FIELDS = [\r\n  'googleMapsURI',\r\n  'websiteURI',\r\n] as const;\r\n\r\n/**\r\n * Supported field names for `PlaceFieldLink`, formatted as `PlaceResult`\r\n * fields.\r\n */\r\nexport const PLACE_RESULT_LINK_FIELDS = [\r\n  'url',\r\n  'website',\r\n] as const;\r\n\r\ntype PlaceLinkField = typeof PLACE_LINK_FIELDS[number];\r\ntype PlaceResultLinkField = typeof PLACE_RESULT_LINK_FIELDS[number];\r\n/**\r\n * String union type of all supported field names for `PlaceFieldLink`.\r\n */\r\nexport type LinkField = PlaceLinkField|PlaceResultLinkField;\r\n\r\nfunction toPlaceLinkField(field: LinkField): PlaceLinkField {\r\n  switch (field) {\r\n    case 'url':\r\n      return 'googleMapsURI';\r\n    case 'website':\r\n      return 'websiteURI';\r\n    default:\r\n      return field;\r\n  }\r\n}\r\n\r\nfunction getFieldValue(place: Place, field: LinkField): string|null|undefined {\r\n  switch (toPlaceLinkField(field)) {\r\n    case 'googleMapsURI':\r\n      return place.googleMapsURI;\r\n    case 'websiteURI':\r\n      return place.websiteURI;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\nfunction getUrlDomain(url: string): string {\r\n  const match = url.match(/^(https?:\\/\\/)?(www\\.)?([^\\/\\?]+)/);\r\n  return (match && match.length > 3) ? match[3] : url;\r\n}\r\n\r\n/**\r\n * Component that renders an anchor tag to one of this place's URLs:\r\n * `websiteURI` or `googleMapsURI`. By default, renders a link to `websiteURI`\r\n * with the URL's domain as the text.\r\n */\r\n@customElement('gmpx-place-field-link')\r\nexport class PlaceFieldLink extends PlaceDataConsumer {\r\n  static override styles = css`\r\n    :host(:hover) {\r\n      text-decoration: underline;\r\n    }\r\n\r\n    a {\r\n      color: inherit;\r\n      text-decoration: inherit;\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * The field to link to, formatted as it is on either a `Place` or\r\n   * `PlaceResult`.\r\n   *\r\n   * Allowed fields are: `googleMapsURI` or `url` for a link to this place on\r\n   * Google Maps; `websiteURI` or `website` for a link to this place's\r\n   * website.\r\n   */\r\n  @property({type: String, reflect: true, attribute: 'href-field'})\r\n  hrefField: LinkField = 'websiteURI';\r\n\r\n  /**\r\n   * The link description that gets read by assistive technology.\r\n   *\r\n   * Set this to something more descriptive if the link's purpose isn't clear\r\n   * from its text content alone. For example, if the link text is just\r\n   * \"Website\", then the `aria-label` could be \"Website for (business name)\".\r\n   */\r\n  @property({attribute: 'aria-label', reflect: true, type: String})\r\n  override ariaLabel: string|null = null;\r\n\r\n  protected override render() {\r\n    const href = this.getHref();\r\n    // clang-format off\r\n    return html`${when(href, () => html`\r\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=${href!}\r\n          aria-label=${this.ariaLabel ?? nothing}>\r\n        ${when(this.hasContentForSlot(),\r\n          () => html`<slot></slot>`,\r\n          () => html`${this.getDefaultLinkText(href!)}`,\r\n        )}\r\n      </a>\r\n    `,)}`;\r\n    // clang-format on\r\n  }\r\n\r\n  protected override updated() {\r\n    // If the aria-label attribute is set, hide it from the a11y tree. Otherwise\r\n    // the component and its shadow DOM content show up as duplicate nodes with\r\n    // the same aria-label.\r\n    this.role = this.ariaLabel != null ? 'none' : null;\r\n  }\r\n\r\n  /** @ignore */\r\n  getRequiredFields(): Array<keyof Place> {\r\n    return [toPlaceLinkField(this.hrefField)];\r\n  }\r\n\r\n  protected override placeHasData(place: Place): boolean {\r\n    return (getFieldValue(place, this.hrefField) != null);\r\n  }\r\n\r\n  private getHref(): string|null {\r\n    const place = this.getPlace();\r\n    if (!place) return null;\r\n    return getFieldValue(place, this.hrefField) ?? null;\r\n  }\r\n\r\n  private hasContentForSlot(): boolean {\r\n    return !!(this.textContent?.trim() || (this.children.length > 0));\r\n  }\r\n\r\n  private getDefaultLinkText(href: string): string {\r\n    switch (toPlaceLinkField(this.hrefField)) {\r\n      case 'googleMapsURI':\r\n        return 'View on Google Maps';\r\n      case 'websiteURI':\r\n      default:\r\n        return getUrlDomain(href);\r\n    }\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-place-field-link': PlaceFieldLink;\r\n  }\r\n}\r\n"]}