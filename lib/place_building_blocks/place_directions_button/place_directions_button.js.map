{"version":3,"file":"place_directions_button.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_directions_button/place_directions_button.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport '../../icon_button/icon_button.js';\r\n\r\nimport {html} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\nimport type {Place} from '../../utils/googlemaps_types.js';\r\nimport {makeWaypoint, WaypointInfo} from '../../utils/place_utils.js';\r\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\r\n\r\n\r\n/**\r\n * Creates a Google Maps URL for directions from origin to destination\r\n * (https://developers.google.com/maps/documentation/urls#directions-action).\r\n */\r\nfunction buildMapsDirectionsURL(\r\n    origin?: WaypointInfo, destination?: WaypointInfo): string {\r\n  let url = 'https://www.google.com/maps/dir/?api=1';\r\n  if (origin) {\r\n    url = appendEncodedWaypointURLParams(url, 'origin', origin);\r\n  }\r\n  if (destination) {\r\n    url = appendEncodedWaypointURLParams(url, 'destination', destination);\r\n  }\r\n  return url;\r\n}\r\n\r\n/**\r\n * Appends encoded URL parameters to a Google Maps Directions URL based on\r\n * waypoint information. Always includes a Place ID if it is specified by the\r\n * waypoint. Describes waypoint by query if available, or \"lat,lng\" otherwise.\r\n */\r\nfunction appendEncodedWaypointURLParams(\r\n    url: string, side: 'origin'|'destination', waypoint: WaypointInfo): string {\r\n  if (waypoint.placeId) {\r\n    url += `&${side}_place_id=${waypoint.placeId}`;\r\n  }\r\n  if (waypoint.query) {\r\n    url += `&${side}=${encodeURIComponent(waypoint.query)}`;\r\n  } else if (waypoint.location) {\r\n    url += `&${side}=${waypoint.location.lat},${waypoint.location.lng}`;\r\n  } else if (waypoint.placeId) {\r\n    // A Place ID can be used as an origin/destination, but it *must* be\r\n    // accompanied by a query.\r\n    url += `&${side}=${encodeURIComponent('Selected Place')}`;\r\n  }\r\n  return url;\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-place-directions-button': PlaceDirectionsButton;\r\n  }\r\n}\r\n\r\n/**\r\n * Component that opens a new tab with directions to this place in Google Maps.\r\n *\r\n * @slot - Content to display as the button’s label.\r\n *\r\n * @cssproperty [--gmpx-color-primary] - Button text and outline color in the\r\n * `outlined` variant, or background color in `filled` variant.\r\n * @cssproperty [--gmpx-color-on-primary] - Button text color in `filled`\r\n * variant.\r\n * @cssproperty [--gmpx-font-size-base] - Font size for the button.\r\n * @cssproperty [--gmpx-font-family-headings] - Font face for the button, except\r\n * for condensed mode.\r\n * @cssproperty [--gmpx-font-family-base] - Font face used when the button is in\r\n * condensed mode.\r\n */\r\n@customElement('gmpx-place-directions-button')\r\nexport class PlaceDirectionsButton extends PlaceDataConsumer {\r\n  // https://lit.dev/docs/components/shadow-dom/#setting-shadowrootoptions\r\n  /** @ignore */\r\n  static override shadowRootOptions = {\r\n    ...PlaceDataConsumer.shadowRootOptions,\r\n    delegatesFocus: true,\r\n  };\r\n\r\n  /**\r\n   * A description that gets read by assistive devices. In the case of icon-only\r\n   * buttons, you should always include an ARIA label for optimal accessibility.\r\n   */\r\n  @property({attribute: 'aria-label', reflect: true, type: String})\r\n  override ariaLabel = null;\r\n\r\n  /**\r\n   * Whether to render the button in a condensed layout, where the label appears\r\n   * below the icon.\r\n   */\r\n  @property({reflect: true, type: Boolean}) condensed = false;\r\n\r\n  /**\r\n   * Optionally specify the starting location or Place. Otherwise Google Maps\r\n   * will ask for or estimate the user’s starting location.\r\n   */\r\n  @property({attribute: false})\r\n  origin?: google.maps.LatLng|google.maps.LatLngLiteral|Place;\r\n\r\n  /** Get directions from destination to origin instead. */\r\n  @property({reflect: true, type: Boolean}) reversed = false;\r\n\r\n  /** Specifies the display style of the button. */\r\n  @property({reflect: true, type: String})\r\n  variant: 'outlined'|'filled' = 'outlined';\r\n\r\n  protected override render() {\r\n    return html`\r\n      <gmpx-icon-button\r\n        .ariaLabel=${this.ariaLabel}\r\n        .condensed=${this.condensed}\r\n        .href=${this.getHref()}\r\n        icon=\"directions\"\r\n        .variant=${this.variant}\r\n      >\r\n        <slot></slot>\r\n      </gmpx-icon-button>\r\n    `;\r\n  }\r\n\r\n  protected override updated() {\r\n    // If the aria-label attribute is set, hide it from the a11y tree. Otherwise\r\n    // the component and its shadow DOM content show up as duplicate nodes with\r\n    // the same aria-label.\r\n    this.role = this.ariaLabel != null ? 'none' : null;\r\n  }\r\n\r\n  /** @ignore */\r\n  getRequiredFields(): Array<keyof Place> {\r\n    return ['displayName', 'formattedAddress', 'location'];\r\n  }\r\n\r\n  protected override placeHasData(place: Place): boolean {\r\n    // A Place requires a Place ID, which is enough to generate a link.\r\n    return true;\r\n  }\r\n\r\n  private getHref(): string {\r\n    const place = this.getPlace();\r\n    const origin = this.reversed ? place : this.origin;\r\n    const destination = this.reversed ? this.origin : place;\r\n    return buildMapsDirectionsURL(\r\n        origin ? makeWaypoint(origin) : undefined,\r\n        destination ? makeWaypoint(destination) : undefined);\r\n  }\r\n}\r\n"]}