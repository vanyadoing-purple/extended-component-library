{"version":3,"file":"place_directions_button_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_directions_button/place_directions_button_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html} from 'lit';\r\n\r\nimport {IconButton} from '../../icon_button/icon_button.js';\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {FakeLatLng} from '../../testing/fake_lat_lng.js';\r\nimport {makeFakePlace} from '../../testing/fake_place.js';\r\nimport type {LatLng, LatLngLiteral, Place, PlaceResult} from '../../utils/googlemaps_types.js';\r\n\r\nimport {PlaceDirectionsButton} from './place_directions_button.js';\r\n\r\ndescribe('PlaceDirectionsButton', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(config?: {\r\n    origin?: LatLng|LatLngLiteral|Place,\r\n    place?: Place|PlaceResult,\r\n    reversed?: boolean,\r\n  }): Promise<IconButton> {\r\n    const root = env.render(html`\r\n      <gmpx-place-directions-button\r\n        .origin=${config?.origin}\r\n        .place=${config?.place}\r\n        .reversed=${config?.reversed ?? false}\r\n      ></gmpx-place-directions-button>\r\n    `);\r\n\r\n    await env.waitForStability();\r\n\r\n    return root\r\n        .querySelector<PlaceDirectionsButton>('gmpx-place-directions-button')!\r\n        .renderRoot.querySelector<IconButton>('gmpx-icon-button')!;\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-directions-button');\r\n    expect(el).toBeInstanceOf(PlaceDirectionsButton);\r\n  });\r\n\r\n  it('opens blank directions when no data is provided', async () => {\r\n    const iconButton = await prepareState();\r\n\r\n    expect(iconButton.href).toBe('https://www.google.com/maps/dir/?api=1');\r\n  });\r\n\r\n  it(`opens directions to place's address if defined`, async () => {\r\n    const place = makeFakePlace({\r\n      displayName: 'Fake Place',\r\n      formattedAddress: '123 Main Street',\r\n      id: 'FAKE_PLACE_ID',\r\n      location: new FakeLatLng(-12.34, 56.78),\r\n    });\r\n    const iconButton = await prepareState({place});\r\n\r\n    expect(iconButton.href)\r\n        .toBe(\r\n            'https://www.google.com/maps/dir/?api=1&destination_place_id=FAKE_PLACE_ID&destination=123%20Main%20Street');\r\n  });\r\n\r\n  it(`opens directions to place's display name without address`, async () => {\r\n    const place = makeFakePlace({\r\n      displayName: 'Fake Place',\r\n      id: 'FAKE_PLACE_ID',\r\n      location: new FakeLatLng(-12.34, 56.78),\r\n    });\r\n    const iconButton = await prepareState({place});\r\n\r\n    expect(iconButton.href)\r\n        .toBe(\r\n            'https://www.google.com/maps/dir/?api=1&destination_place_id=FAKE_PLACE_ID&destination=Fake%20Place');\r\n  });\r\n\r\n  it(`opens directions to place's location without address/name`, async () => {\r\n    const place = makeFakePlace({\r\n      id: 'FAKE_PLACE_ID',\r\n      location: new FakeLatLng(-12.34, 56.78),\r\n    });\r\n    const iconButton = await prepareState({place});\r\n\r\n    expect(iconButton.href)\r\n        .toBe(\r\n            'https://www.google.com/maps/dir/?api=1&destination_place_id=FAKE_PLACE_ID&destination=-12.34,56.78');\r\n  });\r\n\r\n  it(`always includes the destination URL param when a Place ID is specified`,\r\n     async () => {\r\n       // tslint:disable-next-line:prefer-type-annotation\r\n       const place = {id: 'FAKE_PLACE_ID'} as Place;\r\n       const iconButton = await prepareState({place});\r\n\r\n       expect(iconButton.href)\r\n           .toBe(\r\n               'https://www.google.com/maps/dir/?api=1&destination_place_id=FAKE_PLACE_ID&destination=Selected%20Place');\r\n     });\r\n\r\n  const originParams = [\r\n    {\r\n      dataType: 'LatLng',\r\n      origin: new FakeLatLng(-12.34, 56.78),\r\n      expectedQuery: '&origin=-12.34,56.78',\r\n    },\r\n    {\r\n      dataType: 'LatLngLiteral',\r\n      origin: {lat: -12.34, lng: 56.78},\r\n      expectedQuery: '&origin=-12.34,56.78',\r\n    },\r\n    {\r\n      dataType: 'Place',\r\n      origin: makeFakePlace({\r\n        id: 'FAKE_ORIGIN_ID',\r\n        location: new FakeLatLng(-12.34, 56.78),\r\n      }),\r\n      expectedQuery: '&origin_place_id=FAKE_ORIGIN_ID&origin=-12.34,56.78',\r\n    }\r\n  ];\r\n  originParams.forEach(({dataType, origin, expectedQuery}) => {\r\n    it(`opens directions from a ${dataType} origin`, async () => {\r\n      const iconButton = await prepareState({origin});\r\n\r\n      expect(iconButton.href)\r\n          .toBe(`https://www.google.com/maps/dir/?api=1${expectedQuery}`);\r\n    });\r\n  });\r\n\r\n  const destinationParams = [\r\n    {\r\n      dataType: 'LatLng',\r\n      destination: new FakeLatLng(-12.34, 56.78),\r\n      expectedQuery: '&destination=-12.34,56.78',\r\n    },\r\n    {\r\n      dataType: 'LatLngLiteral',\r\n      destination: {lat: -12.34, lng: 56.78},\r\n      expectedQuery: '&destination=-12.34,56.78',\r\n    },\r\n    {\r\n      dataType: 'Place',\r\n      destination: makeFakePlace({\r\n        id: 'FAKE_DESTINATION_ID',\r\n        location: new FakeLatLng(-12.34, 56.78),\r\n      }),\r\n      expectedQuery:\r\n          '&destination_place_id=FAKE_DESTINATION_ID&destination=-12.34,56.78',\r\n    }\r\n  ];\r\n  destinationParams.forEach(({dataType, destination, expectedQuery}) => {\r\n    it(`opens reversed directions to a ${dataType} destination`, async () => {\r\n      const place = makeFakePlace({\r\n        displayName: 'Fake Place',\r\n        id: 'FAKE_PLACE_ID',\r\n      });\r\n      const iconButton =\r\n          await prepareState({place, origin: destination, reversed: true});\r\n\r\n      expect(iconButton.href)\r\n          .toBe(\r\n              `https://www.google.com/maps/dir/?api=1&origin_place_id=FAKE_PLACE_ID&origin=Fake%20Place${\r\n                  expectedQuery}`);\r\n    });\r\n  });\r\n\r\n  it('sets role=\"none\" on the host when aria-label is present', async () => {\r\n    const root = env.render(html`\r\n      <gmpx-place-directions-button aria-label=\"Get Directions\">\r\n      </gmpx-place-directions-button>\r\n    `);\r\n    await env.waitForStability();\r\n    const el = root.querySelector<PlaceDirectionsButton>(\r\n        'gmpx-place-directions-button')!;\r\n\r\n    expect(el.role).toBe('none');\r\n  });\r\n});\r\n"]}