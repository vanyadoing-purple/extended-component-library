{"version":3,"file":"place_reviews_test.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_reviews/place_reviews_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\nimport {map} from 'lit/directives/map.js';\r\n\r\nimport {Environment} from '../../testing/environment.js';\r\nimport {makeFakePlace, SAMPLE_FAKE_PLACE} from '../../testing/fake_place.js';\r\n\r\nimport {PlaceReviews} from './place_reviews.js';\r\n\r\ndescribe('PlaceReviews', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareState(template: TemplateResult):\r\n      Promise<PlaceReviews[]> {\r\n    const root = env.render(template);\r\n    await env.waitForStability();\r\n    return Array.from(root.querySelectorAll('gmpx-place-reviews'));\r\n  }\r\n\r\n  it('is defined', () => {\r\n    const el = document.createElement('gmpx-place-reviews');\r\n    expect(el).toBeInstanceOf(PlaceReviews);\r\n  });\r\n\r\n  it('renders nothing with no place', async () => {\r\n    const [reviews] = await prepareState(html`\r\n      <gmpx-place-reviews></gmpx-place-reviews>\r\n    `);\r\n    expect(reviews.renderRoot.childElementCount).toBe(0);\r\n  });\r\n\r\n  it('renders nothing with no reviews on a place', async () => {\r\n    // clang-format off\r\n    const [undefinedReviews, emptyReviews] = await prepareState(html`\r\n      <gmpx-place-reviews .place=${makeFakePlace({id: ''})}>\r\n      </gmpx-place-reviews>\r\n      <gmpx-place-reviews .place=${makeFakePlace({id: '', reviews: []})}>\r\n      </gmpx-place-reviews>\r\n    `);\r\n    // clang-format on\r\n\r\n    expect(undefinedReviews.renderRoot.childElementCount).toBe(0);\r\n    expect(emptyReviews.renderRoot.childElementCount).toBe(0);\r\n  });\r\n\r\n  it('renders the right text content', async () => {\r\n    const [reviews] = await prepareState(html`\r\n      <gmpx-place-reviews .place=${SAMPLE_FAKE_PLACE}></gmpx-place-reviews>\r\n    `);\r\n    expect(reviews.renderRoot.textContent)\r\n        .toHaveNormalizedText(\r\n            `Author 1 ★★★★★ 1 month ago it's lit! Author 2 2 months ago ` +\r\n            `¡Que bacano! Author 3 ★★★★★ 3 months ago`);\r\n  });\r\n\r\n  it('renders the right URIs', async () => {\r\n    const place = makeFakePlace({\r\n      id: '',\r\n      reviews: [{\r\n        authorAttribution: {\r\n          displayName: 'Author',\r\n          photoURI: 'https://lh3.googlusercontent.com/a/1',\r\n          uri: 'https://www.google.com/maps/contrib/1/reviews',\r\n        },\r\n        publishTime: new Date(1234567890),\r\n        rating: 5,\r\n        relativePublishTimeDescription: '1 month ago',\r\n        text: '',\r\n        textLanguageCode: 'en',\r\n      }],\r\n    });\r\n    const [reviews] = await prepareState(html`\r\n      <gmpx-place-reviews .place=${place}></gmpx-place-reviews>\r\n    `);\r\n    const img = reviews.renderRoot.querySelector('img')!;\r\n    const links = reviews.renderRoot.querySelectorAll('a');\r\n\r\n    expect(img.src).toBe('https://lh3.googlusercontent.com/a/1');\r\n    for (const link of links) {\r\n      expect(link.href).toBe('https://www.google.com/maps/contrib/1/reviews');\r\n    }\r\n  });\r\n\r\n  it('renders the right quantity according to max-reviews', async () => {\r\n    // clang-format off\r\n    const els = await prepareState(html`\r\n      ${map([-1, 0, 0.5, 1, 1.5, 2, 3, 10], (n) => html`\r\n          <gmpx-place-reviews .place=${SAMPLE_FAKE_PLACE} max-reviews=\"${n}\">\r\n          </gmpx-place-reviews>\r\n      `)}\r\n      <gmpx-place-reviews .place=${SAMPLE_FAKE_PLACE}>\r\n      </gmpx-place-reviews>\r\n    `);\r\n    // clang-format on\r\n    const imgCounts = els.map((reviews) => {\r\n      return reviews.renderRoot.querySelectorAll('img').length;\r\n    });\r\n\r\n    expect(imgCounts).toEqual([0, 0, 0, 1, 1, 2, 3, 3, 3]);\r\n  });\r\n});\r\n"]}