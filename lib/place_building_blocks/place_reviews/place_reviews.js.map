{"version":3,"file":"place_reviews.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_reviews/place_reviews.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {css, html} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\nimport {map} from 'lit/directives/map.js';\r\nimport {when} from 'lit/directives/when.js';\r\n\r\nimport {getTypeScaleSizeFromPx, GMPX_BORDER_SEPARATOR, GMPX_COLOR_ON_SURFACE, GMPX_COLOR_ON_SURFACE_VARIANT, GMPX_FONT_BODY, GMPX_FONT_CAPTION, GMPX_FONT_TITLE_MEDIUM, GMPX_RATING_COLOR, GMPX_RATING_COLOR_EMPTY} from '../../base/common_styles.js';\r\nimport {LocalizationController} from '../../base/localization_controller.js';\r\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\r\nimport type {Place, Review} from '../../utils/googlemaps_types.js';\r\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\r\n\r\nconst MAX_RATING = 5;\r\n\r\nenum IconType {\r\n  FULL = 'full',\r\n  EMPTY = 'empty',\r\n}\r\n\r\nfunction toStarIcons(rating: number): IconType[] {\r\n  return Array.from<IconType>({length: MAX_RATING})\r\n      .fill(IconType.FULL, 0, rating)\r\n      .fill(IconType.EMPTY, rating);\r\n}\r\n\r\n/**\r\n * Renders a list of user-generated place reviews.\r\n *\r\n * Reviews are displayed in an order corresponding to the default behavior of\r\n * the [Place\r\n * API](https://developers.google.com/maps/documentation/javascript/reference/place#Place).\r\n *\r\n * @cssproperty [--gmpx-rating-color] - Color of the star rating icons\r\n * when filled.\r\n * @cssproperty [--gmpx-rating-color-empty] - Color of the star rating\r\n * icons when empty.\r\n * @cssproperty [--gmpx-color-outline] - Divider color.\r\n */\r\n@customElement('gmpx-place-reviews')\r\nexport class PlaceReviews extends PlaceDataConsumer {\r\n  static override styles = css`\r\n    .container {\r\n      color: ${GMPX_COLOR_ON_SURFACE};\r\n      font: ${GMPX_FONT_BODY};\r\n    }\r\n    .review {\r\n      padding: ${getTypeScaleSizeFromPx(20)};\r\n      padding-bottom: ${getTypeScaleSizeFromPx(16)};\r\n    }\r\n    .review:not(:last-child) {\r\n      border-bottom: ${GMPX_BORDER_SEPARATOR};\r\n    }\r\n    .header, .subheader {\r\n      align-items: center;\r\n      display: flex;\r\n    }\r\n    .subheader {\r\n      margin-top: ${getTypeScaleSizeFromPx(16)};\r\n    }\r\n    .body {\r\n      margin-top: ${getTypeScaleSizeFromPx(8)};\r\n    }\r\n    .author-photo {\r\n      display: block;\r\n      height: ${getTypeScaleSizeFromPx(32)};\r\n    }\r\n    .author-name {\r\n      color: inherit;\r\n      font: ${GMPX_FONT_TITLE_MEDIUM};\r\n      margin-inline-start: ${getTypeScaleSizeFromPx(8)};\r\n      text-decoration: none;\r\n    }\r\n    .author-name:hover {\r\n      text-decoration: underline;\r\n    }\r\n    .star-icon.full {\r\n      color: ${GMPX_RATING_COLOR};\r\n    }\r\n    .star-icon.empty {\r\n      color: ${GMPX_RATING_COLOR_EMPTY};\r\n    }\r\n    .relative-time {\r\n      color: ${GMPX_COLOR_ON_SURFACE_VARIANT};\r\n      font: ${GMPX_FONT_CAPTION};\r\n      margin-inline-start: ${getTypeScaleSizeFromPx(12)};\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * The maximum number of reviews to display. If undefined, displays all\r\n   * reviews returned by the Places API, which provides at most 5.\r\n   */\r\n  @property({type: Number, reflect: true, attribute: 'max-reviews'})\r\n  maxReviews?: number;\r\n\r\n  protected readonly fontLoader =\r\n      new WebFontController(this, [WebFont.GOOGLE_SANS_TEXT]);\r\n\r\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\r\n\r\n  protected override render() {\r\n    const reviews = this.getReviews();\r\n    return when(reviews && reviews.length, () => html`\r\n      <div class=\"container\">\r\n        ${map(reviews!, this.renderOneReview.bind(this))}\r\n      </div>\r\n    `);\r\n  }\r\n\r\n  /** @ignore */\r\n  getRequiredFields(): Array<keyof Place> {\r\n    return ['reviews'];\r\n  }\r\n\r\n  protected override placeHasData(place: Place): boolean {\r\n    return !!(place.reviews && place.reviews.length > 0);\r\n  }\r\n\r\n  private renderOneReview(review: Review) {\r\n    const attribution = review.authorAttribution;\r\n    const header = html`\r\n      <div class=\"header\">\r\n        ${\r\n        when(\r\n            attribution?.photoURI,\r\n            () => html`\r\n          <a target=\"_blank\" href=\"${attribution?.uri ?? ''}\">\r\n            <img class=\"author-photo\"\r\n                alt=${\r\n                this.getMsg(\r\n                    'PLACE_REVIEWS_AUTHOR_PHOTO_ALT',\r\n                    attribution?.displayName ?? '')}\r\n                src=${attribution!.photoURI!}>\r\n          </a>\r\n        `)}\r\n        <a class=\"author-name\"\r\n          target=\"_blank\"\r\n          href=\"${attribution?.uri ?? ''}\">\r\n          ${attribution?.displayName ?? ''}\r\n        </a>\r\n      </div>\r\n    `;\r\n\r\n    // clang-format off\r\n    const subheader = html`\r\n      <div class=\"subheader\">\r\n        ${when(review.rating, () => html`\r\n          <span role=\"img\" aria-label=${\r\n              this.getMsg('PLACE_RATING_ARIA_LABEL', review.rating!)}>\r\n            <span aria-hidden=\"true\">\r\n              ${map(toStarIcons(review.rating!), (iconType) => {\r\n                return html`<span class=\"star-icon ${iconType}\">&#x2605;</span>`;\r\n              })}\r\n            </span>\r\n          </span>\r\n        `)}\r\n        <span class=\"relative-time\">\r\n          ${review.relativePublishTimeDescription ?? ''}\r\n        </span>\r\n      </div>\r\n    `;\r\n    // clang-format on\r\n\r\n    return html`\r\n      <div class=\"review\">\r\n        ${header}\r\n        ${subheader}\r\n        ${when(review.text, () => html`\r\n          <div class=\"body\">\r\n            ${review.text}\r\n          </div>\r\n        `)}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private getReviews(): Review[]|null {\r\n    const reviews = this.getPlace()?.reviews;\r\n    if (!reviews) return null;\r\n    if (this.maxReviews === undefined) return reviews;\r\n    if (this.maxReviews < 1) return null;\r\n    return reviews.slice(0, Math.floor(this.maxReviews));\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-place-reviews': PlaceReviews;\r\n  }\r\n}\r\n"]}