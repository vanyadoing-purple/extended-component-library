{"version":3,"file":"distances_test.js","sourceRoot":"","sources":["../../src/store_locator/distances_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {Environment} from '../testing/environment.js';\r\nimport {FAKE_DM_VALUE, makeFakeDistanceMatrixResponse} from '../testing/fake_distance_matrix.js';\r\nimport type {LatLngLiteral} from '../utils/googlemaps_types.js';\r\n\r\nimport {DistanceInfo, DistanceMeasurer, DistanceSource} from './distances.js';\r\n\r\nconst DEFAULT_FAKE_DISTANCE: DistanceInfo = {\r\n  source: DistanceSource.DISTANCE_MATRIX,\r\n  value: FAKE_DM_VALUE,\r\n  text: `${FAKE_DM_VALUE} 0`\r\n};\r\n\r\ndescribe('DistanceMeasurer', () => {\r\n  const env = new Environment();\r\n\r\n  beforeEach(() => {\r\n    DistanceMeasurer.reset();\r\n  });\r\n\r\n  it('locally caches Distance Matrix requests', async () => {\r\n    const distanceMatrixSpy =\r\n        spyOn(env.fakeGoogleMapsHarness!, 'distanceMatrixHandler')\r\n            .and.callThrough();\r\n\r\n    const origin = {lat: 0, lng: 0};\r\n    const destinations = [{lat: 1, lng: 1}, {lat: 2, lng: 2}];\r\n    const units = 0 as google.maps.UnitSystem.IMPERIAL;\r\n    const measurer = new DistanceMeasurer();\r\n\r\n    const distances =\r\n        await measurer.computeDistances(origin, destinations, units);\r\n    await measurer.computeDistances(origin, destinations, units);\r\n\r\n    expect(distanceMatrixSpy).toHaveBeenCalledTimes(1);\r\n    expect(distances).toEqual([DEFAULT_FAKE_DISTANCE, DEFAULT_FAKE_DISTANCE]);\r\n  });\r\n\r\n  it('does not cache a transient error, OVER_QUERY_LIMIT', async () => {\r\n    const distanceMatrixSpy =\r\n        spyOn(env.fakeGoogleMapsHarness!, 'distanceMatrixHandler')\r\n            .and.throwError(\r\n                {code: 'OVER_QUERY_LIMIT', name: 'MapsRequestError'} as\r\n                google.maps.MapsRequestError);\r\n    const origin = {lat: 0, lng: 0};\r\n    const destinations = [{lat: 1, lng: 1}, {lat: 2, lng: 2}];\r\n    const units = 0 as google.maps.UnitSystem.IMPERIAL;\r\n    const measurer = new DistanceMeasurer();\r\n\r\n    await expectAsync(measurer.computeDistances(origin, destinations, units))\r\n        .toBeRejected();\r\n    distanceMatrixSpy.and.callThrough();\r\n    const distances =\r\n        await measurer.computeDistances(origin, destinations, units);\r\n\r\n    expect(distanceMatrixSpy).toHaveBeenCalledTimes(2);\r\n    expect(distances).toEqual([DEFAULT_FAKE_DISTANCE, DEFAULT_FAKE_DISTANCE]);\r\n  });\r\n\r\n  it('caches a hard error, INVALID_REQUEST', async () => {\r\n    const distanceMatrixSpy =\r\n        spyOn(env.fakeGoogleMapsHarness!, 'distanceMatrixHandler')\r\n            .and.throwError(\r\n                {code: 'INVALID_REQUEST', name: 'MapsRequestError'} as\r\n                google.maps.MapsRequestError);\r\n    const origin = {lat: 0, lng: 0};\r\n    const destinations = [{lat: 1, lng: 1}, {lat: 2, lng: 2}];\r\n    const units = 0 as google.maps.UnitSystem.IMPERIAL;\r\n    const measurer = new DistanceMeasurer();\r\n\r\n    await expectAsync(measurer.computeDistances(origin, destinations, units))\r\n        .toBeRejected();\r\n    await expectAsync(measurer.computeDistances(origin, destinations, units))\r\n        .toBeRejected();\r\n\r\n\r\n    expect(distanceMatrixSpy).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('only uses Distance Matrix for the closest 25 destinations', async () => {\r\n    const origin = {lat: 0, lng: 0};\r\n    const destinations: LatLngLiteral[] = [];\r\n    const farPoint = {lat: 100, lng: 100};\r\n    const nearPoint = {lat: 5, lng: 5};\r\n    const units = 0 as google.maps.UnitSystem.IMPERIAL;\r\n\r\n    // First five destinations are far away, fake geometric distance = 100.\r\n    for (let i = 0; i < 5; i++) {\r\n      destinations.push(farPoint);\r\n    }\r\n\r\n    // Next 25 destinations are closer, fake geometric distance = 5.\r\n    for (let i = 0; i < 25; i++) {\r\n      destinations.push(nearPoint);\r\n    }\r\n\r\n    // Distance Matrix will return distance = 4 for near points.\r\n    const distanceMap = new Map<LatLngLiteral, number>();\r\n    distanceMap.set(nearPoint, 4);\r\n    env.fakeGoogleMapsHarness!.distanceMatrixHandler = (request) =>\r\n        makeFakeDistanceMatrixResponse(request, distanceMap);\r\n\r\n    const measurer = new DistanceMeasurer();\r\n    const distances =\r\n        await measurer.computeDistances(origin, destinations, units);\r\n\r\n    expect(distances[0])\r\n        .toEqual({source: DistanceSource.GEOMETRIC, value: 100});\r\n    expect(distances[5])\r\n        .toEqual(\r\n            {source: DistanceSource.DISTANCE_MATRIX, value: 4, text: '4 0'});\r\n  });\r\n});\r\n"]}