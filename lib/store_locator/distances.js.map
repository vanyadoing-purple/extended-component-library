{"version":3,"file":"distances.js","sourceRoot":"","sources":["../../src/store_locator/distances.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {APILoader} from '../api_loader/api_loader.js';\r\nimport {LatLng, LatLngLiteral} from '../utils/googlemaps_types.js';\r\nimport {RequestCache} from '../utils/request_cache.js';\r\n\r\nconst CACHE_SIZE = 10;\r\nconst MAX_DISTANCE_MATRIX_DESTINATIONS = 25;\r\n\r\nfunction makeDistanceMatrixRequestCache() {\r\n  return new RequestCache<\r\n      google.maps.DistanceMatrixRequest, google.maps.DistanceMatrixResponse,\r\n      google.maps.MapsRequestError>(\r\n      CACHE_SIZE, (error: google.maps.MapsRequestError) => {\r\n        // Requests with a transient error of OVER_QUERY_LIMIT\r\n        // and UNKNOWN_ERROR should be retried. See full list of statuses\r\n        // https://developers.google.com/maps/documentation/javascript/reference/distance-matrix#DistanceMatrixStatus\r\n        return error.code ===\r\n            'OVER_QUERY_LIMIT' as google.maps.DistanceMatrixStatus ||\r\n            error.code === 'UNKNOWN_ERROR' as google.maps.DistanceMatrixStatus;\r\n      });\r\n}\r\n\r\n/** How a distance was calculated. */\r\nexport enum DistanceSource {\r\n  GEOMETRIC,\r\n  DISTANCE_MATRIX\r\n}\r\n\r\n/** Distance measurement between two locations. */\r\nexport interface DistanceInfo {\r\n  value?: number;\r\n  text?: string;\r\n  source?: DistanceSource;\r\n}\r\n\r\ntype Destination = LatLng|LatLngLiteral;\r\n\r\n/**\r\n * A utility for calculating distances from a single point to N other points.\r\n *\r\n * This class combines the Maps JS Distance Matrix API with a global request\r\n * cache and a fallback for when N is more than allowed by the API.\r\n */\r\nexport class DistanceMeasurer {\r\n  private static service?: google.maps.DistanceMatrixService;\r\n  private static cache = makeDistanceMatrixRequestCache();\r\n\r\n  constructor(private readonly elementForLogging?: HTMLElement) {}\r\n\r\n  /**\r\n   * Computes travel distance between `origin` and each of the `destinations`.\r\n   *\r\n   * If there are more than 25 `destinations`, the Distance Matrix API cannot\r\n   * process them in a single request. In this case, the method will assign\r\n   * a geometric distance to all N `destinations`, then use Distance Matrix\r\n   * to compute accurate distances to the nearest 25 options.\r\n   */\r\n  async computeDistances(\r\n      origin: LatLng|LatLngLiteral, destinations: Array<LatLng|LatLngLiteral>,\r\n      units: google.maps.UnitSystem): Promise<DistanceInfo[]> {\r\n    const distances = new Map<Destination, DistanceInfo>();\r\n    for (const destination of destinations) {\r\n      distances.set(destination, {});\r\n    }\r\n\r\n    let destinationsForLookup = [...destinations];\r\n    if (destinations.length > MAX_DISTANCE_MATRIX_DESTINATIONS) {\r\n      // Too many `destinations` for Distance Matrix; start by calculating\r\n      // geometric distance.\r\n      const {spherical} =\r\n          await APILoader.importLibrary('geometry', this.elementForLogging) as\r\n          google.maps.GeometryLibrary;\r\n      for (const [destination, distanceInfo] of distances.entries()) {\r\n        distanceInfo.source = DistanceSource.GEOMETRIC;\r\n        distanceInfo.value =\r\n            spherical.computeDistanceBetween(origin, destination);\r\n      }\r\n\r\n      // Take the top 25 closest points to refine via Distance Matrix.\r\n      const getSphericalDistance = (p: Destination) =>\r\n          distances.get(p)?.value ?? Infinity;\r\n      destinationsForLookup.sort(\r\n          (a, b) => getSphericalDistance(a) - getSphericalDistance(b));\r\n      destinationsForLookup =\r\n          destinationsForLookup.slice(0, MAX_DISTANCE_MATRIX_DESTINATIONS);\r\n    }\r\n\r\n    const request: google.maps.DistanceMatrixRequest = {\r\n      origins: [origin],\r\n      destinations: destinationsForLookup,\r\n      travelMode: 'DRIVING' as google.maps.TravelMode,\r\n      unitSystem: units,\r\n    };\r\n    let responsePromise = DistanceMeasurer.cache.get(request);\r\n    if (responsePromise == null) {\r\n      responsePromise = this.getService().then(\r\n          (service) => service.getDistanceMatrix(request));\r\n      DistanceMeasurer.cache.set(request, responsePromise);\r\n    }\r\n    const response = await responsePromise;\r\n    for (let i = 0; i < response.rows[0].elements.length; i++) {\r\n      const distanceInfo = distances.get(destinationsForLookup[i])!;\r\n      const apiResult = response.rows[0].elements[i];\r\n      if (apiResult.status === 'OK') {\r\n        distanceInfo.value = apiResult.distance.value;\r\n        distanceInfo.text = apiResult.distance.text;\r\n        distanceInfo.source = DistanceSource.DISTANCE_MATRIX;\r\n      }\r\n    }\r\n\r\n    return destinations.map(destination => distances.get(destination)!);\r\n  }\r\n\r\n  private async getService(): Promise<google.maps.DistanceMatrixService> {\r\n    if (!DistanceMeasurer.service) {\r\n      const {DistanceMatrixService} =\r\n          await APILoader.importLibrary('routes', this.elementForLogging) as\r\n          google.maps.RoutesLibrary;\r\n      DistanceMeasurer.service = new DistanceMatrixService();\r\n    }\r\n    return DistanceMeasurer.service;\r\n  }\r\n\r\n  /**\r\n   * Resets Distance Measurer state by deleting any existing service object\r\n   * and clearing its cache.\r\n   * This method should be invoked for testing purposes only.\r\n   * @ignore\r\n   */\r\n  static reset() {\r\n    DistanceMeasurer.cache = makeDistanceMatrixRequestCache();\r\n    DistanceMeasurer.service = undefined;\r\n  }\r\n}\r\n"]}