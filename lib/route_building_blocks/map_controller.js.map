{"version":3,"file":"map_controller.js","sourceRoot":"","sources":["../../src/route_building_blocks/map_controller.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;GAkBG;AAIH,OAAO,EAAC,eAAe,EAAC,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,eAAe,EAAC,MAAM,uBAAuB,CAAC;AAEtD;;;;GAIG;AACH,MAAM,OAAO,aAAa;IAGxB,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;IAClC,CAAC;IAYD,YAA6B,IAAuC;QAAvC,SAAI,GAAJ,IAAI,CAAmC;QAzB5D,gBAAW,GAAG,IAAI,QAAQ,EAAmB,CAAC;QA0BpD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC1C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAClC,MAAM,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;aAC7C;YACD,MAAM,UAAU,GAAG,MAAoB,CAAC;YACxC,6DAA6D;YAC7D,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACzB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC9C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;aACtE;SACF;IACH,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,QAAQ,EAAmB,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACK,mBAAmB;QACzB,KAAK,MAAM,IAAI,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC7C,IAAI,IAAI,YAAY,OAAO,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;gBAC3D,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\r\n\r\nimport {deepParentChain} from '../utils/deep_element_access.js';\r\nimport {MapElement} from '../utils/googlemaps_types.js';\r\nimport {Deferred} from '../utils/deferred.js';\r\n\r\nimport {ViewportManager} from './viewport_manager.js';\r\n\r\n/**\r\n * Controller that finds a containing `<gmp-map>` element in the DOM when its\r\n * host is connected, and saves a reference to the internal Map for the host to\r\n * use.\r\n */\r\nexport class MapController implements ReactiveController {\r\n  private deferredMap = new Deferred<google.maps.Map>();\r\n\r\n  get map(): google.maps.Map|undefined {\r\n    return this.deferredMap.value;\r\n  }\r\n\r\n  /**\r\n   * Resolves to the map when it's ready. It might not be ready immediately due\r\n   * to delays in connecting the host or loading the `<gmp-map>` component from\r\n   * the Maps JS API.\r\n   */\r\n  get mapPromise(): Promise<google.maps.Map> {\r\n    return this.deferredMap.promise;\r\n  }\r\n\r\n  /**\r\n   * The viewport manager instance for the map. This is first defined when `map`\r\n   * is defined, so it can be safely accessed after awaiting `mapPromise`.\r\n   *\r\n   * When the host is disconnected and `map` is unset, `viewportManager` remains\r\n   * set to the most recent viewport manager, so that components can be\r\n   * unregistered in the host's `disconnectedCallback`.\r\n   */\r\n  viewportManager?: ViewportManager;\r\n\r\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\r\n    host.addController(this);\r\n  }\r\n\r\n  async hostConnected() {\r\n    const gmpMap = this.getContainingGmpMap();\r\n    if (gmpMap) {\r\n      if (!customElements.get('gmp-map')) {\r\n        await customElements.whenDefined('gmp-map');\r\n      }\r\n      const mapElement = gmpMap as MapElement;\r\n      // Make sure the host hasn't been disconnected while awaiting\r\n      if (this.host.isConnected) {\r\n        this.deferredMap.resolve(mapElement.innerMap);\r\n        this.viewportManager = ViewportManager.getInstanceForMap(mapElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  hostDisconnected() {\r\n    this.deferredMap = new Deferred<google.maps.Map>();\r\n  }\r\n\r\n  /**\r\n   * Finds and returns a `<gmp-map>` in the DOM that contains the host element,\r\n   * even if the host is in a shadow root. The `<gmp-map>` is identified by its\r\n   * tag and might not be an instance of MapElement, if the custom element is\r\n   * not yet defined.\r\n   */\r\n  private getContainingGmpMap(): Element|null {\r\n    for (const node of deepParentChain(this.host)) {\r\n      if (node instanceof Element && node.localName === 'gmp-map') {\r\n        return node;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n"]}