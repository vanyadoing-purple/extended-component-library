{"version":3,"file":"viewport_manager_test.js","sourceRoot":"","sources":["../../src/route_building_blocks/viewport_manager_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {Environment} from '../testing/environment.js';\r\nimport {FakeMapElement} from '../testing/fake_gmp_components.js';\r\nimport {FakeLatLngBounds} from '../testing/fake_lat_lng.js';\r\n\r\nimport {ViewportManager} from './viewport_manager.js';\r\n\r\nfunction getFakeMap(): google.maps.MapElement {\r\n  return new FakeMapElement() as unknown as google.maps.MapElement;\r\n}\r\n\r\ndescribe('ViewportManager', () => {\r\n  const env = new Environment();\r\n\r\n  beforeEach(() => {\r\n    env.defineFakeMapElement();\r\n  });\r\n\r\n  it('sets the map in the constructor', () => {\r\n    const map = getFakeMap();\r\n    const manager = new ViewportManager(map);\r\n\r\n    expect(manager.map).toBe(map);\r\n  });\r\n\r\n  describe('getInstanceForMap()', () => {\r\n    it('constructs an instance for a map', () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n\r\n      expect(manager.map).toBe(map);\r\n    });\r\n\r\n    it('constructs separate instances for separate maps', () => {\r\n      const map1 = getFakeMap();\r\n      const map2 = getFakeMap();\r\n      const manager1 = ViewportManager.getInstanceForMap(map1);\r\n      const manager2 = ViewportManager.getInstanceForMap(map2);\r\n\r\n      expect(manager1).not.toBe(manager2);\r\n    });\r\n\r\n    it('uses the same insntance for the same map', () => {\r\n      const map = getFakeMap();\r\n      const manager1 = ViewportManager.getInstanceForMap(map);\r\n      const manager2 = ViewportManager.getInstanceForMap(map);\r\n\r\n      expect(manager1).toBe(manager2);\r\n    });\r\n  });\r\n\r\n  describe('registration', () => {\r\n    it('updates the viewport when registering a new component', async () => {\r\n      const manager = ViewportManager.getInstanceForMap(getFakeMap());\r\n      const component = {getBounds: () => null};\r\n      spyOn(manager, 'updateViewport');\r\n      await manager.register(component);\r\n\r\n      expect(manager.updateViewport).toHaveBeenCalled();\r\n    });\r\n\r\n    it(`doesn't update when registering an existing component`, async () => {\r\n      const manager = ViewportManager.getInstanceForMap(getFakeMap());\r\n      const component = {getBounds: () => null};\r\n      await manager.register(component);\r\n      spyOn(manager, 'updateViewport');\r\n      await manager.register(component);\r\n\r\n      expect(manager.updateViewport).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('updates when unregistering a registered component', async () => {\r\n      const manager = ViewportManager.getInstanceForMap(getFakeMap());\r\n      const component = {getBounds: () => null};\r\n      await manager.register(component);\r\n      spyOn(manager, 'updateViewport');\r\n      await manager.unregister(component);\r\n\r\n      expect(manager.updateViewport).toHaveBeenCalled();\r\n    });\r\n\r\n    it(`doesn't update when unregistering an unknown component`, async () => {\r\n      const manager = ViewportManager.getInstanceForMap(getFakeMap());\r\n      const component = {getBounds: () => null};\r\n      spyOn(manager, 'updateViewport');\r\n      await manager.unregister(component);\r\n\r\n      expect(manager.updateViewport).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('setting the viewport', () => {\r\n    it('fits the bounds of a registered component', async () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n      const component = {\r\n        getBounds: () => ({north: 1, south: 0, east: 1, west: 0})\r\n      };\r\n\r\n      await manager.register(component);\r\n\r\n      expect(map.innerMap.fitBounds)\r\n          .toHaveBeenCalledOnceWith(\r\n              new FakeLatLngBounds({north: 1, south: 0, east: 1, west: 0}));\r\n    });\r\n\r\n    it('fits the bounds union of two registered components', async () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n      const component1 = {\r\n        getBounds: () => ({north: 1, south: 0, east: 1, west: 0})\r\n      };\r\n      const component2 = {\r\n        getBounds: () => ({north: 2, south: 1, east: 2, west: 1})\r\n      };\r\n\r\n      await manager.register(component1);\r\n      (map as unknown as FakeMapElement).innerMap.fitBounds.calls.reset();\r\n      await manager.register(component2);\r\n\r\n      expect(map.innerMap.fitBounds)\r\n          .toHaveBeenCalledOnceWith(\r\n              new FakeLatLngBounds({north: 2, south: 0, east: 2, west: 0}));\r\n    });\r\n\r\n    it('fits the remaining bounds when unregistering a component', async () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n      const component1 = {\r\n        getBounds: () => ({north: 1, south: 0, east: 1, west: 0})\r\n      };\r\n      const component2 = {\r\n        getBounds: () => ({north: 2, south: 1, east: 2, west: 1})\r\n      };\r\n\r\n      await manager.register(component1);\r\n      await manager.register(component2);\r\n      (map as unknown as FakeMapElement).innerMap.fitBounds.calls.reset();\r\n      await manager.unregister(component1);\r\n\r\n      expect(map.innerMap.fitBounds)\r\n          .toHaveBeenCalledOnceWith(\r\n              new FakeLatLngBounds({north: 2, south: 1, east: 2, west: 1}));\r\n    });\r\n\r\n    it(`doesn't call fitBounds when removing the only component`, async () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n      const component = {\r\n        getBounds: () => ({north: 1, south: 0, east: 1, west: 0})\r\n      };\r\n\r\n      await manager.register(component);\r\n      (map as unknown as FakeMapElement).innerMap.fitBounds.calls.reset();\r\n      await manager.unregister(component);\r\n\r\n      expect(map.innerMap.fitBounds).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('fits bounds when calling updateViewport() manually', async () => {\r\n      const map = getFakeMap();\r\n      const manager = ViewportManager.getInstanceForMap(map);\r\n      const component = {\r\n        getBounds: () => ({north: 1, south: 0, east: 1, west: 0})\r\n      };\r\n\r\n      await manager.register(component);\r\n      (map as unknown as FakeMapElement).innerMap.fitBounds.calls.reset();\r\n      await manager.updateViewport();\r\n\r\n      expect(map.innerMap.fitBounds)\r\n          .toHaveBeenCalledOnceWith(\r\n              new FakeLatLngBounds({north: 1, south: 0, east: 1, west: 0}));\r\n    });\r\n  });\r\n});\r\n"]}