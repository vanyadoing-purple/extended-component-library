{"version":3,"file":"route_polyline.js","sourceRoot":"","sources":["../../../src/route_building_blocks/route_polyline/route_polyline.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {PropertyValues} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\nimport {APILoader} from '../../api_loader/api_loader.js';\r\nimport {Deferred} from '../../utils/deferred.js';\r\nimport {MapController} from '../map_controller.js';\r\nimport {RouteDataConsumer} from '../route_data_consumer.js';\r\nimport {LatLngBounded} from '../viewport_manager.js';\r\n\r\nconst POLYLINE_OPTIONS_PROPS = [\r\n  'strokeColor',\r\n  'strokeWeight',\r\n  'strokeOpacity',\r\n  'zIndex',\r\n  'invisible',\r\n] as const;\r\n\r\n/**\r\n * Renders a polyline indicating the path of a route.\r\n */\r\n@customElement('gmpx-route-polyline')\r\nexport class RoutePolyline extends RouteDataConsumer implements LatLngBounded {\r\n  /**\r\n   * Whether or not to automatically adjust the map's viewport to include the\r\n   * polyline.\r\n   */\r\n  @property({attribute: 'fit-in-viewport', type: Boolean, reflect: true})\r\n  fitInViewport = false;\r\n\r\n  /**\r\n   * Whether or not the polyline is invisible or visible on the map.\r\n   */\r\n  @property({attribute: 'invisible', type: Boolean, reflect: true})\r\n  invisible = false;\r\n\r\n  /**\r\n   * Stroke color of the polyline. All CSS3 colors are supported except for\r\n   * extended named colors.\r\n   */\r\n  @property({attribute: 'stroke-color', type: String, reflect: true})\r\n  strokeColor?: string;\r\n\r\n  /**\r\n   * The stroke opacity of the polyline between 0.0 and 1.0.\r\n   */\r\n  @property({attribute: 'stroke-opacity', type: Number, reflect: true})\r\n  strokeOpacity?: number;\r\n\r\n  /**\r\n   * The stroke width of the polyline in pixels.\r\n   */\r\n  @property({attribute: 'stroke-weight', type: Number, reflect: true})\r\n  strokeWeight?: number;\r\n\r\n  /**\r\n   * The z-index of the polyline compared to other polys.\r\n   */\r\n  @property({attribute: 'z-index', type: Number, reflect: true})\r\n  zIndex?: number;\r\n\r\n  private readonly innerPolylineDeferred = new Deferred<google.maps.Polyline>();\r\n\r\n  /**\r\n   * The inner `google.maps.Polyline` from the Maps JS API. This value is set\r\n   * once `innerPolylinePromise` is resolved.\r\n   */\r\n  get innerPolyline(): google.maps.Polyline|undefined {\r\n    return this.innerPolylineDeferred.value;\r\n  }\r\n\r\n  /**\r\n   * Resolves to the inner polyline when it's ready. It might not be ready\r\n   * immediately because the `Polyline` class is loaded asynchronously from\r\n   * the Maps JS API.\r\n   */\r\n  get innerPolylinePromise(): Promise<google.maps.Polyline> {\r\n    return this.innerPolylineDeferred.promise;\r\n  }\r\n\r\n  private readonly mapController = new MapController(this);\r\n\r\n  constructor() {\r\n    super();\r\n    this.initPolyline();\r\n  }\r\n\r\n  private async initPolyline() {\r\n    const {Polyline} =\r\n        await APILoader.importLibrary('maps', this) as typeof google.maps;\r\n    const polyline = new Polyline();\r\n    this.innerPolylineDeferred.resolve(polyline);\r\n  }\r\n\r\n  override async connectedCallback() {\r\n    super.connectedCallback();\r\n    const polyline = await this.innerPolylinePromise;\r\n    const map = await this.mapController.mapPromise;\r\n    // Make sure the component hasn't been disconnected while awaiting\r\n    if (this.isConnected) {\r\n      polyline.setMap(map);\r\n      await this.mapController.viewportManager!.register(this);\r\n    }\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    this.mapController.viewportManager?.unregister(this);\r\n    this.innerPolyline?.setMap(null);\r\n  }\r\n\r\n  protected override updated(changedProperties: PropertyValues<this>) {\r\n    if (POLYLINE_OPTIONS_PROPS.some((prop) => changedProperties.has(prop))) {\r\n      this.setInnerPolylineOptions();\r\n    }\r\n    if (changedProperties.has('route') ||\r\n        changedProperties.has('contextRoute')) {\r\n      this.updatePath();\r\n    }\r\n    if (changedProperties.has('fitInViewport') ||\r\n        (this.fitInViewport &&\r\n         (changedProperties.has('route') ||\r\n          changedProperties.has('contextRoute')))) {\r\n      this.mapController.viewportManager?.updateViewport();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the `LatLngBounds` of the polyline that should be included in the\r\n   * map's viewport, for use by the `ViewportManager`.\r\n   * @ignore\r\n   */\r\n  getBounds(): google.maps.LatLngBounds|null {\r\n    if (!this.fitInViewport) return null;\r\n    return this.getRoute()?.bounds ?? null;\r\n  }\r\n\r\n  private async setInnerPolylineOptions() {\r\n    const options = {\r\n      strokeColor: this.strokeColor,\r\n      strokeWeight: this.strokeWeight,\r\n      zIndex: this.zIndex,\r\n      strokeOpacity: this.strokeOpacity,\r\n      visible: !this.invisible,\r\n    };\r\n    const polyline = await this.innerPolylinePromise;\r\n    polyline.setOptions(options);\r\n  }\r\n\r\n  private async updatePath() {\r\n    let path: google.maps.LatLng[] = [];\r\n    const route = this.getRoute();\r\n    if (route) {\r\n      for (const leg of route.legs) {\r\n        for (const step of leg.steps) {\r\n          path = path.concat(step.path);\r\n        }\r\n      }\r\n    }\r\n    const polyline = await this.innerPolylinePromise;\r\n    polyline.setPath(path);\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'gmpx-route-polyline': RoutePolyline;\r\n  }\r\n}\r\n"]}