{"version":3,"file":"web_font_controller_test.js","sourceRoot":"","sources":["../../src/base/web_font_controller_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,mCAAmC;AAEnC,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AAEtD,OAAO,EAAC,OAAO,EAAE,iBAAiB,EAAC,MAAM,0BAA0B,CAAC;AAGpE,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,UAAU;IAAlD;;QACE,eAAU,GAAG,IAAI,iBAAiB,CAC9B,IAAI,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC;IAC3E,CAAC;CAAA,CAAA;AAHK,yBAAyB;IAD9B,aAAa,CAAC,oCAAoC,CAAC;GAC9C,yBAAyB,CAG9B;AAED,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,KAAK,UAAU,4BAA4B;QAEzC,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAA;;KAE3B,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAC/B,oCAAoC,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;QAED,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAE7B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,SAAS,+BAA+B,CACpC,QAAsC;QACxC,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CACvC,mDAAmD,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,SAAS,oCAAoC,CACzC,QAAsC;QACxC,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CACvC,sDAAsD,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,4BAA4B,EAAE,CAAC;QAErC,MAAM,CAAC,+BAA+B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,CAAC,oCAAoC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,4BAA4B,EAAE,CAAC;QAElD,MAAM,CAAC,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,oCAAoC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,4BAA4B,EAAE,CAAC;QACrC,MAAM,4BAA4B,EAAE,CAAC;QAErC,MAAM,CAAC,+BAA+B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,CAAC,oCAAoC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, LitElement} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\n\r\nimport {Environment} from '../testing/environment.js';\r\n\r\nimport {WebFont, WebFontController} from './web_font_controller.js';\r\n\r\n@customElement('gmpx-test-web-font-controller-host')\r\nclass TestWebFontControllerHost extends LitElement {\r\n  fontLoader = new WebFontController(\r\n      this, [WebFont.GOOGLE_SANS_TEXT, WebFont.MATERIAL_SYMBOLS_OUTLINED]);\r\n}\r\n\r\ndescribe('WebFontController', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareControllerHostElement():\r\n      Promise<TestWebFontControllerHost> {\r\n    const root = env.render(html`\r\n      <gmpx-test-web-font-controller-host></gmpx-test-web-font-controller-host>\r\n    `);\r\n    const instance = root.querySelector<TestWebFontControllerHost>(\r\n        'gmpx-test-web-font-controller-host');\r\n    if (!instance) {\r\n      throw new Error('Failed to find gmpx-test-web-font-controller-host.');\r\n    }\r\n\r\n    await env.waitForStability();\r\n\r\n    return instance;\r\n  }\r\n\r\n  function selectAllGoogleSansLinkElements(\r\n      rootNode: HTMLElement|DocumentFragment): HTMLLinkElement[] {\r\n    return Array.from(rootNode.querySelectorAll<HTMLLinkElement>(\r\n        `link[href*=\"Google%20Sans%20Text:wght@400%3B500\"]`));\r\n  }\r\n\r\n  function selectAllMaterialSymbolsLinkElements(\r\n      rootNode: HTMLElement|DocumentFragment): HTMLLinkElement[] {\r\n    return Array.from(rootNode.querySelectorAll<HTMLLinkElement>(\r\n        `link[href*=\"Material%20Symbols%20Outlined:wght@400\"]`));\r\n  }\r\n\r\n  it('injects <link> in document.head for correct set of fonts', async () => {\r\n    await prepareControllerHostElement();\r\n\r\n    expect(selectAllGoogleSansLinkElements(document.head)).toHaveSize(1);\r\n    expect(selectAllMaterialSymbolsLinkElements(document.head)).toHaveSize(1);\r\n  });\r\n\r\n  it('injects <link> in shadow root for correct set of fonts', async () => {\r\n    const host = await prepareControllerHostElement();\r\n\r\n    expect(selectAllGoogleSansLinkElements(host.renderRoot)).toHaveSize(0);\r\n    expect(selectAllMaterialSymbolsLinkElements(host.renderRoot)).toHaveSize(1);\r\n  });\r\n\r\n  it('does not inject <link> for the same fonts multiple times', async () => {\r\n    await prepareControllerHostElement();\r\n    await prepareControllerHostElement();\r\n\r\n    expect(selectAllGoogleSansLinkElements(document.head)).toHaveSize(1);\r\n    expect(selectAllMaterialSymbolsLinkElements(document.head)).toHaveSize(1);\r\n  });\r\n});\r\n"]}