{"version":3,"file":"slot_validation_controller.js","sourceRoot":"","sources":["../../src/base/slot_validation_controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAMH,0DAA0D;AAC1D,SAAS,cAAc,CAAC,QAAgB;IACtC,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;AAChD,CAAC;AAED;;;;;GAKG;AACH,MAAM,OAAO,wBAAwB;IACnC,YACqB,IAAuC,EACvC,MAAyB,EACzB,kBAA4B;QAF5B,SAAI,GAAJ,IAAI,CAAmC;QACvC,WAAM,GAAN,MAAM,CAAmB;QACzB,uBAAkB,GAAlB,kBAAkB,CAAU;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACtC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;SACpC;IACH,CAAC;IAEO,sBAAsB,CAAC,KAAc;QAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,yCAAyC,cAAc,CAAC,QAAQ,CAAC,GAAG;gBAChE,sDACI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EACjE,KAAK,CAAC,CAAC;SACZ;IACH,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\r\n\r\nimport {LoggingController} from './logging_controller.js';\r\n\r\n/** Formats a slot name for display in logged messages. */\r\nfunction formatSlotName(slotName: string): string {\r\n  return slotName ? `\"${slotName}\"` : 'default';\r\n}\r\n\r\n/**\r\n * Controller that checks the host element for incorrectly slotted children.\r\n *\r\n * @param supportedSlotNames Names of supported slots under the host element.\r\n *     The default slot is denoted by an empty string.\r\n */\r\nexport class SlotValidationController implements ReactiveController {\r\n  constructor(\r\n      private readonly host: ReactiveControllerHost&LitElement,\r\n      private readonly logger: LoggingController,\r\n      private readonly supportedSlotNames: string[]) {\r\n    host.addController(this);\r\n  }\r\n\r\n  hostConnected() {\r\n    for (const child of this.host.children) {\r\n      this.checkChildSlotValidity(child);\r\n    }\r\n  }\r\n\r\n  private checkChildSlotValidity(child: Element) {\r\n    const slotName = child.getAttribute('slot') ?? '';\r\n    if (!this.supportedSlotNames.includes(slotName)) {\r\n      this.logger.warn(\r\n          `Detected child element in unsupported ${formatSlotName(slotName)} ` +\r\n              `slot. This component supports the following slots: ${\r\n                  this.supportedSlotNames.map(formatSlotName).join(', ')}.`,\r\n          child);\r\n    }\r\n  }\r\n}\r\n"]}