{"version":3,"file":"logging_controller_test.js","sourceRoot":"","sources":["../../src/base/logging_controller_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,mCAAmC;AAEnC,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AAEtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,yBAAyB,CAAC;AAG1D,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,UAAU;IAAlD;;QACE,WAAM,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;CAAA,CAAA;AAFK,yBAAyB;IAD9B,aAAa,CAAC,mCAAmC,CAAC;GAC7C,yBAAyB,CAE9B;AAED,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,KAAK,UAAU,4BAA4B;QAEzC,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CACnB,IAAI,CAAA,yEAAyE,CAAC,CAAC;QACnF,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;SACtE;QAED,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAE7B,OAAO,QAAqC,CAAC;IAC/C,CAAC;IAED,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,IAAI,GAAG,MAAM,4BAA4B,EAAE,CAAC;QAClD,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAEpC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;aACf,wBAAwB,CACrB,gDAAgD,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,IAAI,GAAG,MAAM,4BAA4B,EAAE,CAAC;QAClD,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAEvC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;aACf,wBAAwB,CACrB,mDAAmD,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,IAAI,GAAG,MAAM,4BAA4B,EAAE,CAAC;QAClD,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAExB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAEtC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;aAChB,wBAAwB,CACrB,iDAAiD,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, LitElement} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\n\r\nimport {Environment} from '../testing/environment.js';\r\n\r\nimport {LoggingController} from './logging_controller.js';\r\n\r\n@customElement('gmpx-test-logging-controller-host')\r\nclass TestLoggingControllerHost extends LitElement {\r\n  logger = new LoggingController(this);\r\n}\r\n\r\ndescribe('LoggingController', () => {\r\n  const env = new Environment();\r\n\r\n  async function prepareControllerHostElement():\r\n      Promise<TestLoggingControllerHost> {\r\n    const root = env.render(\r\n        html`<gmpx-test-logging-controller-host></gmpx-test-logging-controller-host>`);\r\n    const instance = root.querySelector('gmpx-test-logging-controller-host');\r\n    if (!instance) {\r\n      throw new Error('Failed to find gmpx-test-logging-controller-host.');\r\n    }\r\n\r\n    await env.waitForStability();\r\n\r\n    return instance as TestLoggingControllerHost;\r\n  }\r\n\r\n  it('logs info message to console', async () => {\r\n    const host = await prepareControllerHostElement();\r\n    spyOn(console, 'info');\r\n\r\n    host.logger.info('some info', host);\r\n\r\n    expect(console.info)\r\n        .toHaveBeenCalledOnceWith(\r\n            `<gmpx-test-logging-controller-host>: some info`, host);\r\n  });\r\n\r\n  it('logs warning message to console', async () => {\r\n    const host = await prepareControllerHostElement();\r\n    spyOn(console, 'warn');\r\n\r\n    host.logger.warn('some warning', host);\r\n\r\n    expect(console.warn)\r\n        .toHaveBeenCalledOnceWith(\r\n            `<gmpx-test-logging-controller-host>: some warning`, host);\r\n  });\r\n\r\n  it('logs error message to console', async () => {\r\n    const host = await prepareControllerHostElement();\r\n    spyOn(console, 'error');\r\n\r\n    host.logger.error('some error', host);\r\n\r\n    expect(console.error)\r\n        .toHaveBeenCalledOnceWith(\r\n            `<gmpx-test-logging-controller-host>: some error`, host);\r\n  });\r\n});"]}