{"version":3,"file":"logging_controller.js","sourceRoot":"","sources":["../../src/base/logging_controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH;;;;GAIG;AACH,MAAM,OAAO,iBAAiB;IAC5B,YAA6B,IAAuC;QAAvC,SAAI,GAAJ,IAAI,CAAmC;QAClE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,UAAU,KAAI,CAAC;IAEf,2DAA2D;IAC3D,IAAI,CAAC,OAAe,EAAE,GAAG,IAAe;QACtC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC,OAAe,EAAE,GAAG,IAAe;QACtC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,mDAAmD;IACnD,KAAK,CAAC,OAAe,EAAE,GAAG,IAAe;QACvC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,kEAAkE;IAClE,aAAa,CAAC,OAAe;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEO,cAAc,CAAC,OAAe;QACpC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,OAAO,EAAE,CAAC;IAC5D,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\r\n\r\n/**\r\n * Controller that handles logging messages to the web console. Components\r\n * should use this controller rather than calling `console` directly to prepend\r\n * useful information to the messages.\r\n */\r\nexport class LoggingController implements ReactiveController {\r\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\r\n    this.host.addController(this);\r\n  }\r\n\r\n  hostUpdate() {}\r\n\r\n  /** Outputs an informational message to the web console. */\r\n  info(message: string, ...data: unknown[]) {\r\n    console.info(this.formatMessage(message), ...data);\r\n  }\r\n\r\n  /** Outputs a warning message to the web console. */\r\n  warn(message: string, ...data: unknown[]) {\r\n    console.warn(this.formatMessage(message), ...data);\r\n  }\r\n\r\n  /** Outputs an error message to the web console. */\r\n  error(message: string, ...data: unknown[]) {\r\n    console.error(this.formatMessage(message), ...data);\r\n  }\r\n\r\n  /** Returns a formatted message for display in the web console. */\r\n  formatMessage(message: string) {\r\n    return this.prependTagName(message);\r\n  }\r\n\r\n  private prependTagName(message: string): string {\r\n    return `<${this.host.tagName.toLowerCase()}>: ${message}`;\r\n  }\r\n}\r\n"]}