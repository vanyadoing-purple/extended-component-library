{"version":3,"file":"localization_controller_test.js","sourceRoot":"","sources":["../../src/base/localization_controller_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,mCAAmC;AAEnC,OAAO,EAAC,IAAI,EAAiB,MAAM,KAAK,CAAC;AACzC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AAEvD,OAAO,EAAC,aAAa,EAAC,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAC,sBAAsB,EAAC,MAAM,8BAA8B,CAAC;AAGpE,IAAM,8BAA8B,GAApC,MAAM,8BAA+B,SAAQ,aAAa;IAA1D;;QACqB,WAAM,GAAG,sBAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAa1E,CAAC;IAXoB,MAAM;QACvB,OAAO,IAAI,CAAA;cACD;QACN,aAAa;QACb,IAAI,CAAC,MAAM,CAAC,qCAAqC,CAAC;cAC5C;QACN,aAAa;QACb,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;cACrB,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;KAC9C,CAAC;IACJ,CAAC;CACF,CAAA;AAdK,8BAA8B;IADnC,aAAa,CAAC,wCAAwC,CAAC;GAClD,8BAA8B,CAcnC;AAGD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,SAAS,CAAC,GAAG,EAAE;QACb,sBAAsB,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,KAAK,UAAU,YAAY;QACzB,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAA;;;KAG3B,CAAC,CAAC;QACH,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAC3B,wCAAwC,CAAE,CAAC;QAC/C,OAAO,EAAC,IAAI,EAAC,CAAC;IAChB,CAAC;IAED,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,YAAY,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;aAC9B,oBAAoB,CAAC,wCAAwC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,YAAY,EAAE,CAAC;QACpC,iBAAiB,CAAC;YAChB,aAAa,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,cAAc,WAAW,EAAE;YAC3D,cAAc,EAAE,SAAS;SAC1B,CAAC,CAAC;QACH,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;aAC9B,oBAAoB,CAAC,8CAA8C,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {html, TemplateResult} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\n\r\nimport {Environment} from '../testing/environment.js';\r\nimport {setStringLiterals} from '../utils/localize.js';\r\n\r\nimport {BaseComponent} from './base_component.js';\r\nimport {LocalizationController} from './localization_controller.js';\r\n\r\n@customElement('gmpx-test-localization-controller-host')\r\nclass TestLocalizationControllerHost extends BaseComponent {\r\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\r\n\r\n  protected override render(): TemplateResult {\r\n    return html`\r\n      <span>${\r\n        // @ts-ignore\r\n        this.getMsg('PLACE_OPENING_HOURS_DEFAULT_SUMMARY')}</span>\r\n      <span>${\r\n        // @ts-ignore\r\n        this.getMsg('PLACE_CLOSED')}</span>\r\n      <span>${this.getMsg('PLACE_OPENS', '9:00 AM')}</span>\r\n    `;\r\n  }\r\n}\r\n\r\n\r\ndescribe('LocalizationController', () => {\r\n  const env = new Environment();\r\n\r\n  afterEach(() => {\r\n    LocalizationController.reset();\r\n  });\r\n\r\n  async function prepareState() {\r\n    const root = env.render(html`\r\n      <gmpx-test-localization-controller-host>\r\n      </gmpx-test-localization-controller-host>\r\n    `);\r\n    const host = root.querySelector<TestLocalizationControllerHost>(\r\n        'gmpx-test-localization-controller-host')!;\r\n    return {host};\r\n  }\r\n\r\n  it(`injects strings with default locale into host components`, async () => {\r\n    const {host} = await prepareState();\r\n    expect(host.renderRoot.textContent)\r\n        .toHaveNormalizedText('See opening hours Closed Opens 9:00 AM');\r\n  });\r\n\r\n  it(`sets string literals with updated locale`, async () => {\r\n    const {host} = await prepareState();\r\n    setStringLiterals({\r\n      'PLACE_OPENS': (openingTime) => `Abre a las ${openingTime}`,\r\n      'PLACE_CLOSED': 'Cerrado',\r\n    });\r\n    await env.waitForStability();\r\n    expect(host.renderRoot.textContent)\r\n        .toHaveNormalizedText('See opening hours Cerrado Abre a las 9:00 AM');\r\n  });\r\n});\r\n"]}