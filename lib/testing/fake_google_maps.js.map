{"version":3,"file":"fake_google_maps.js","sourceRoot":"","sources":["../../src/testing/fake_google_maps.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {LatLng, LatLngLiteral, Place, PlaceResult, SearchByTextRequest} from '../utils/googlemaps_types.js';\r\n\r\nimport {makeFakeAutocomplete} from './fake_autocomplete.js';\r\nimport {makeFakeDistanceMatrixResponse} from './fake_distance_matrix.js';\r\nimport {FakeAdvancedMarkerElement, FakeMapElement} from './fake_gmp_components.js';\r\nimport {FakeLatLng, FakeLatLngBounds} from './fake_lat_lng.js';\r\nimport {makeFakePlace} from './fake_place.js';\r\nimport {makeFakeRoute} from './fake_route.js';\r\n\r\n/**\r\n * Sets up a fake instance of the Google Maps SDK which can be used as-is or\r\n * modified in tests.\r\n */\r\nexport class FakeGoogleMapsHarness {\r\n  /**\r\n   * Override this function to customize how `google.maps.places.Place` is\r\n   * instantiated.\r\n   */\r\n  placeConstructor = (options: google.maps.places.PlaceOptions) =>\r\n      makeFakePlace({id: options.id});\r\n\r\n  /**\r\n   * Override this function to control the response of a\r\n   * `google.maps.places.PlacesService.getDetails()` request.\r\n   */\r\n  getDetailsHandler = (request: google.maps.places.PlaceDetailsRequest) => ({\r\n    result: {} as PlaceResult,\r\n    status: 'OK',\r\n  });\r\n\r\n  /**\r\n   * Override this function to control the response of a\r\n   * `google.maps.DirectionsService.route()` request.\r\n   */\r\n  routeHandler = (request: google.maps.DirectionsRequest) => Promise.resolve({\r\n    routes: [makeFakeRoute()],\r\n  } as google.maps.DirectionsResult);\r\n\r\n  /**\r\n   * Override this function to control the response of a\r\n   * `google.maps.DistanceMatrixService.getDistanceMatrix()` request.\r\n   */\r\n  distanceMatrixHandler = (request: google.maps.DistanceMatrixRequest) =>\r\n      makeFakeDistanceMatrixResponse(request);\r\n\r\n  /**\r\n   * Override this function to control the response of a\r\n   * `google.maps.places.PlacesService.findPlaceFromQuery()` request.\r\n   */\r\n  findPlaceFromQueryGAHandler =\r\n      (request: google.maps.places.FindPlaceFromQueryRequest) =>\r\n          ({results: [] as PlaceResult[], status: 'OK'});\r\n\r\n  /**\r\n   * Override this function to control the response of `Place.searchByText()`.\r\n   */\r\n  searchByTextHandler = (request: SearchByTextRequest) =>\r\n      ({places: [] as Place[]});\r\n\r\n  /**\r\n   * Spy for the fake Places Autocomplete.\r\n   */\r\n  autocompleteSpy = makeFakeAutocomplete();\r\n\r\n  /**\r\n   * Override this function to control the constructor for\r\n   * `google.maps.places.Autocomplete`.\r\n   */\r\n  autocompleteConstructor =\r\n      (input: HTMLInputElement,\r\n       options?: google.maps.places.AutocompleteOptions) =>\r\n          this.autocompleteSpy;\r\n\r\n\r\n  /**\r\n   * Collection of libraries that are dispatched via `importLibrary()`.\r\n   * Override libraries in this structure to augment or modify the behavior of\r\n   * Fake Google Maps.\r\n   */\r\n  readonly libraries: {[libraryName: string]: any};\r\n\r\n  /** This is an object that can be substituted for `google.maps`. */\r\n  readonly sdk: typeof google.maps;\r\n\r\n  // tslint:disable:enforce-name-casing\r\n  constructor() {\r\n    const harness = this;\r\n    this.libraries = {\r\n      'core': {\r\n        LatLng: FakeLatLng,\r\n        LatLngBounds: FakeLatLngBounds,\r\n        UnitSystem: {IMPERIAL: 0, METRIC: 1},\r\n      },\r\n      'maps': {\r\n        Map: FakeMapElement,\r\n        Polyline: class {\r\n          setMap() {}\r\n          setPath() {}\r\n          setOptions() {}\r\n        }\r\n      },\r\n      'marker': {\r\n        AdvancedMarkerElement: FakeAdvancedMarkerElement,\r\n      },\r\n      'places': {\r\n        Autocomplete: class {\r\n          constructor(\r\n              input: HTMLInputElement,\r\n              options?: google.maps.places.AutocompleteOptions) {\r\n            return harness.autocompleteConstructor(input, options);\r\n          }\r\n        },\r\n\r\n        Place: class {\r\n          constructor(options: google.maps.places.PlaceOptions) {\r\n            return harness.placeConstructor(options);\r\n          }\r\n\r\n          static searchByText(request: SearchByTextRequest) {\r\n            return Promise.resolve(harness.searchByTextHandler(request));\r\n          }\r\n        },\r\n\r\n        PlacesService: class {\r\n          getDetails(\r\n              options: google.maps.places.PlaceDetailsRequest,\r\n              callback: (\r\n                  a: PlaceResult|null,\r\n                  b: google.maps.places.PlacesServiceStatus) => void) {\r\n            const {result, status} = harness.getDetailsHandler(options);\r\n            callback(result, status as google.maps.places.PlacesServiceStatus);\r\n          }\r\n\r\n          findPlaceFromQuery(\r\n              options: google.maps.places.FindPlaceFromQueryRequest,\r\n              callback: (\r\n                  a: PlaceResult[],\r\n                  b: google.maps.places.PlacesServiceStatus) => void) {\r\n            const {results, status} =\r\n                harness.findPlaceFromQueryGAHandler(options);\r\n            callback(results, status as google.maps.places.PlacesServiceStatus);\r\n          }\r\n        }\r\n      },\r\n      'routes': {\r\n        DirectionsService: class {\r\n          route(request: google.maps.DirectionsRequest) {\r\n            return harness.routeHandler(request);\r\n          }\r\n        },\r\n\r\n        DistanceMatrixService: class {\r\n          getDistanceMatrix(request: google.maps.DistanceMatrixRequest) {\r\n            return Promise.resolve(harness.distanceMatrixHandler(request));\r\n          }\r\n        }\r\n      },\r\n      'geometry': {\r\n        spherical: {\r\n          /**\r\n           * Fake spherical geometry calculation returns the difference in\r\n           * `lat` values.\r\n           */\r\n          computeDistanceBetween(\r\n              from: LatLng|LatLngLiteral, to: LatLng|LatLngLiteral): number {\r\n            const getLat = (x: LatLng|LatLngLiteral) =>\r\n                typeof x.lat === 'function' ? x.lat() : x.lat;\r\n            return Math.abs(getLat(from) - getLat(to));\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.sdk = {\r\n      importLibrary: (libraryName: string) => this.importLibrary(libraryName),\r\n    } as typeof google.maps;\r\n  }\r\n\r\n  importLibrary(libraryName: string):\r\n      ReturnType<typeof google.maps.importLibrary> {\r\n    const library = this.libraries[libraryName];\r\n    if (library) {\r\n      return Promise.resolve(\r\n          library as Awaited<ReturnType<typeof google.maps.importLibrary>>);\r\n    }\r\n    throw new Error(`Fake Maps library ${library} not implemented.`);\r\n  }\r\n}\r\n"]}