{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../src/testing/environment.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import 'jasmine'; (google3-only)\r\n\r\nimport {ReactiveElement, render as litRender, TemplateResult} from 'lit';\r\n\r\nimport {APILoader} from '../api_loader/api_loader.js';\r\n\r\nimport {FakeAdvancedMarkerElement, FakeMapElement} from './fake_gmp_components.js';\r\nimport {FakeGoogleMapsHarness} from './fake_google_maps.js';\r\n\r\ndeclare global {\r\n  module jasmine {\r\n    interface Matchers<T> {\r\n      toHaveNormalizedText(expected: string): boolean;\r\n    }\r\n  }\r\n}\r\n\r\nconst customMatchers: jasmine.CustomMatcherFactories = {\r\n  /**\r\n   * Custom matcher that replaces whitespaces with a single space and trims the\r\n   * actual string before performing a comparison against the expected string.\r\n   * Useful for comparing a HTML element's `textContent` against a string.\r\n   */\r\n  toHaveNormalizedText(): jasmine.CustomMatcher {\r\n    return {\r\n      compare(actual: string, expected: string): jasmine.CustomMatcherResult {\r\n        const normalizedActual = actual.replace(/\\s+/g, ' ').trim();\r\n        return {\r\n          pass: normalizedActual === expected,\r\n          message: `Expected '${normalizedActual}' to be '${expected}'`,\r\n        };\r\n      }\r\n    };\r\n  },\r\n};\r\n\r\n/** This class manages the Jasmine test environment. */\r\nexport class Environment {\r\n  importLibrarySpy?: jasmine.Spy;\r\n  fakeGoogleMapsHarness?: FakeGoogleMapsHarness;\r\n\r\n  private environmentRoot?: HTMLElement;\r\n  private readonly documentHeadChildren: Set<Element>;\r\n\r\n  constructor() {\r\n    this.documentHeadChildren = new Set(document.head.children);\r\n\r\n    beforeAll(() => {\r\n      jasmine.addMatchers(customMatchers);\r\n    });\r\n\r\n    beforeEach(() => {\r\n      jasmine.clock().install();\r\n\r\n      this.fakeGoogleMapsHarness = new FakeGoogleMapsHarness();\r\n\r\n      // Stub calls to the APILoader.importLibrary static method.\r\n      this.importLibrarySpy =\r\n          spyOn(APILoader, 'importLibrary')\r\n              .and.callFake(\r\n                  (library: string) =>\r\n                      this.fakeGoogleMapsHarness!.importLibrary(library));\r\n    });\r\n\r\n    afterEach(() => {\r\n      jasmine.clock().uninstall();\r\n\r\n      // Clean up any elements appended to document head during a test.\r\n      for (const child of document.head.children) {\r\n        if (!this.documentHeadChildren.has(child)) {\r\n          child.remove();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for the page to become stable; including waiting for any Lit elements\r\n   * to finish rendering and for fonts to load.\r\n   */\r\n  async waitForStability() {\r\n    if (this.environmentRoot) {\r\n      await this.waitForLitRender(this.environmentRoot);\r\n    }\r\n    await document.fonts.ready;\r\n  }\r\n\r\n  /**\r\n   * Renders a Lit template in the environment's root container.\r\n   *\r\n   * @param template a Lit `TemplateResult` to render.\r\n   * @return The root container the template was rendered to.\r\n   */\r\n  render(template: TemplateResult) {\r\n    const root = this.createNewRoot();\r\n    litRender(template, root);\r\n    return root;\r\n  }\r\n\r\n  /**\r\n   * Inserts a fake implementation of <gmp-map> into the test environment.\r\n   */\r\n  defineFakeMapElement() {\r\n    if (!customElements.get('gmp-map')) {\r\n      customElements.define('gmp-map', FakeMapElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inserts a fake implementation of <gmp-advanced-marker> into the test\r\n   * environment.\r\n   */\r\n  defineFakeAdvancedMarkerElement() {\r\n    if (!customElements.get('gmp-advanced-marker')) {\r\n      customElements.define('gmp-advanced-marker', FakeAdvancedMarkerElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Waits for all Lit `ReactiveElement` children of the given parent node to\r\n   * finish rendering.\r\n   *\r\n   * @param root a parent node to wait for rendering on.\r\n   */\r\n  private async waitForLitRender(root: ParentNode) {\r\n    for (const element of root.querySelectorAll('*')) {\r\n      if (element instanceof ReactiveElement) {\r\n        await element.updateComplete;\r\n        await this.waitForLitRender(element.renderRoot);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a root container in the document body.\r\n   *\r\n   * Removes any existing root if present.\r\n   *\r\n   * @return The new root container.\r\n   */\r\n  private createNewRoot() {\r\n    const oldRoot = this.environmentRoot;\r\n    if (oldRoot && oldRoot.parentNode) {\r\n      oldRoot.parentNode.removeChild(oldRoot);\r\n    }\r\n\r\n    const root = document.createElement('div');\r\n    root.id = 'root';\r\n    root.style.display = 'inline-flex';\r\n    document.body.appendChild(root);\r\n    this.environmentRoot = root;\r\n    return root;\r\n  }\r\n}\r\n"]}